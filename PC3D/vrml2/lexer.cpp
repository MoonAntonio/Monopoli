/* A lexical scanner generated by flex */


#define FLEX_SCANNER

#include <io.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "stldefs.h"

#include "vrml.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#ifdef __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */


#ifdef __TURBOC__
#define YY_USE_CONST
#endif


#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.
 */
#define YY_START ((yy_start - 1) / 2)

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file".  Now included
 * only for backward compatibility with previous versions of flex.
 */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#ifdef __cplusplus
extern "C" {
#endif
	extern int yywrap YY_PROTO(( void ));
#ifdef __cplusplus
	}
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static void yyunput YY_PROTO(( int c, char *buf_ptr ));
void yyrestart YY_PROTO(( FILE *input_file ));
void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
static void yy_push_state YY_PROTO(( int new_state ));
static void yy_pop_state YY_PROTO(( void ));
static int yy_top_state YY_PROTO(( void ));

static void *yy_flex_alloc YY_PROTO(( unsigned int ));
static void *yy_flex_realloc YY_PROTO(( void *, unsigned int ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define INITIAL 0
#define NODE 1
#define SFB 2
#define SFC 3
#define SFF 4
#define SFIMG 5
#define SFI 6
#define SFR 7
#define SFS 8
#define SFT 9
#define SFV2 10
#define SFV3 11
#define MFC 12
#define MFF 13
#define MFI 14
#define MFR 15
#define MFS 16
#define MFV2 17
#define MFV3 18
#define IN_SFS 19
#define IN_MFS 20
#define IN_SFIMG 21
typedef unsigned char YY_CHAR;
typedef int yy_state_type;

#define FLEX_DEBUG
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
extern char *yytext;
#define yytext_ptr yytext

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_END_OF_BUFFER 47
static const short int yy_accept[972] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   47,   45,   43,   44,   43,   14,
       43,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   45,   45,   45,   45,   45,   45,   45,   45,   23,
       45,   45,   45,   45,   21,   21,   45,   45,   45,   35,
       34,   35,   35,   45,   45,   33,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   17,   18,   45,   45,

       24,   45,   22,   22,   45,   45,   45,   36,   36,   36,
       45,   45,   45,   45,   45,   45,   38,   38,   39,   38,
       38,   40,   45,   42,   42,   43,   44,   43,   44,   44,
       43,   43,   43,   43,   14,   14,   14,    7,   14,   14,
       14,    6,   14,   14,   14,   14,    0,   15,    0,    0,
        0,    0,    0,    0,    0,   23,   23,    0,    0,    0,
        0,   21,   21,    0,    0,    0,    0,    0,   35,   35,
       35,   15,    0,   33,   33,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       16,    0,   24,   24,   22,   22,    0,    0,    0,    0,

        0,   36,   36,   36,   16,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   38,   38,   38,   38,   38,
       38,   37,   42,   42,   44,   44,   44,   43,    4,   14,
       14,   14,   14,    5,   14,   14,   14,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,   41,    0,    0,    0,    0,   41,   41,    0,
       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   25,    0,    0,    0,    0,
        0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   22,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   26,    0,    0,
        0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   43,   14,    9,   14,   14,
       14,   14,   14,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   23,   41,   41,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
        0,   25,   25,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   26,   26,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   43,   14,    2,    8,   14,
       14,   12,   20,    0,    0,    0,   31,    0,    0,    0,
        0,    0,   31,    0,    0,    0,   31,    0,    0,    0,
       31,    0,    0,    0,    0,    0,   31,   41,   41,   41,
       41,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,    0,    0,    0,   27,    0,    0,    0,
       27,    0,    0,    0,   27,    0,    0,    0,    0,    0,

       27,    0,    0,    0,   32,    0,    0,    0,    0,    0,
       32,    0,    0,    0,   32,    0,    0,    0,   32,    0,
        0,    0,    0,    0,   32,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
       28,    0,    0,    0,   28,    0,    0,    0,   28,    0,
        0,    0,    0,    0,   28,   43,   14,   14,   14,   14,
        0,    0,   31,   31,    0,    0,    0,   31,   31,   31,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,    0,   25,    0,    0,   27,   27,
        0,    0,    0,   27,   27,   27,    0,    0,   32,   32,
        0,    0,    0,   32,   32,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
        0,   26,    0,    0,   28,   28,    0,    0,    0,   28,
       28,   28,   43,   14,   10,   14,   14,    0,    0,    0,
        0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
        0,   29,    0,    0,    0,   29,    0,    0,   29,    0,

        0,    0,    0,    0,   29,    0,    0,    0,   29,    0,
        0,    0,   29,    0,    0,    0,    0,    0,   29,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,    0,
        0,    0,    0,   30,    0,    0,    0,   30,    0,    0,
       30,    0,    0,    0,    0,    0,   30,    0,    0,    0,
       30,    0,    0,    0,   30,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,   30,    0,    0,    0,    0,
        0,   43,   14,   11,   14,    0,   31,    0,    0,   31,
        0,    0,   31,    0,   31,    0,    0,   31,    0,    0,

       29,   29,    0,    0,    0,   29,   29,   29,    0,    0,
        0,   29,   29,   29,    0,    0,    0,    0,    0,   29,
        0,   27,    0,    0,   27,    0,    0,   27,    0,   27,
        0,    0,   27,    0,   32,    0,    0,   32,    0,    0,
       32,    0,   32,    0,    0,   32,    0,    0,   30,   30,
        0,    0,    0,   30,   30,   30,    0,    0,    0,   30,
       30,   30,    0,    0,    0,    0,    0,   30,    0,   28,
        0,    0,   28,    0,    0,   28,    0,   28,    0,    0,
       28,   43,   14,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   43,   14,   14,    0,   29,    0,    0,   29,
        0,    0,   29,    0,   29,    0,    0,   29,    0,    0,
       29,    0,   29,    0,    0,   29,    0,    0,   29,    0,
       30,    0,    0,   30,    0,    0,   30,    0,   30,    0,
        0,   30,    0,    0,   30,    0,   30,    0,    0,   30,
        0,    0,   30,   43,    3,   14,   43,   13,   43,   43,
       43,   43,   43,    1,   43,    1,    1,    1,    1,    1,
        0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    5,    5,    1,    5,
        5,    5,    8,    2,    9,   10,    5,   11,   12,   13,
       12,   12,   12,   12,   12,   14,   12,    5,    5,    5,
        5,    5,    5,    5,   15,   16,   16,   17,   18,   19,
        5,    5,   20,    5,    5,   21,   22,   23,   24,   25,
        5,   26,   27,   28,   29,   30,    5,   31,    5,    5,
       32,   33,   34,    5,    5,    5,   16,   16,   16,   35,

       36,   37,    5,    5,   38,    5,    5,   39,    5,   40,
       41,   42,    5,    5,   43,   44,   45,   46,    5,   47,
        5,    5,    1,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static const int yy_meta[48] =
    {   0,
        1,    2,    3,    2,    4,    5,    6,    1,    4,    1,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    8,    1,    8,    7,    7,    7,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4
    } ;

static const short int yy_base[1133] =
    {   0,
        0,    6,   13,    0,   59,   65,   92,    0,  104,  110,
      116,  122,  128,  134,  140,  146,  159,  165,  164,  177,
      183,  189,  195,  201,  207,  233,  259,  285,  311,  337,
      363,  389,  422,  455,  481,  507,  533,  559,  222,  228,
      256,  274,  324,  350,  672, 8254,   73,   79,  280,    0,
      247,  652,  638,  633,  630,  630,  627,  625,  621,   18,
      597,  619,  600,  589,   78,   96,  592,  170,  289,  301,
      315,  605,   51,  328,  373,  341,  368,  354,  651,    0,
     8254,  386,  587,  400,  394,  405,  420,  424,  664,  433,
      437,  677,  453,  457,  690,  586, 8254, 8254,  466,  470,

      486,  491,  517,  495,  512,  521,  703,    0,  548,  584,
      546,  563,  716,  573,  609,  729,    0,  559, 8254,  622,
      604, 8254,  619,  626,  630,  643,  302,  742,  746,  750,
      756,  762,  768,  774,    0,  582,  572,    0,  577,  573,
      563,    0,  572,  553,  546,  545,  557, 8254,  520,  771,
        0,  799,  834,  847,  775,  780,  816,    0,  860,  873,
      812,  784,    0,  809,    0,  886,  921,  934,    0,  899,
      905,    0,  902,  907,  938,  946,    0,  973, 1008, 1021,
      950,    0, 1034, 1069, 1082,  954,    0, 1095, 1130, 1143,
     8254,  958,  982,  990,  986,    0, 1042,    0, 1156, 1191,

     1204,    0, 1056, 1117,    0, 1053,    0, 1217, 1252, 1265,
     1103, 1278, 1291, 1326, 1339,    0, 1123, 1169, 1175, 1181,
     1230, 8254, 1227,    0, 1240, 1241, 1304, 1310,    0,  522,
      517,  486,  484,    0,  448,  433,  421,  428,  423, 1307,
     1312, 1238, 1352, 1365, 1378,    0,    0, 1382, 1395, 1392,
     1396, 1400, 1404, 1446, 1459, 1472, 1485, 1498,  191, 1417,
        0, 1414, 1422, 1426, 1544, 1557, 1570,    0,    0, 1430,
     1511, 1508, 1519, 1524, 1512, 1529, 1583,    0,    0,    0,
     1587,    0, 1594, 1599, 1603, 1616, 1629,    0,    0,    0,
     1633, 1646, 1643, 1648, 1652, 1665, 1678,    0,    0,    0,

     1682, 1695, 1692,    0, 1699, 1704, 1708, 1721, 1734,    0,
        0,    0, 1738, 1751, 1748, 1753, 1757, 1762, 1775,    0,
        0,    0, 1779,    0, 1786, 1791, 1795, 1808, 1821,    0,
        0,    0, 1825, 1838,    0, 1844,  401,    0,  398,  378,
      350,  348,  323,  338, 8254, 1841, 1864, 1877, 1912, 1925,
     1938, 1966, 2001, 2014, 1845, 1849,    0, 2018, 1885, 2064,
     2077, 2112, 2125, 2138, 2166, 2201, 2214, 1889, 1893, 1897,
     2227, 1946, 1954, 1974, 2240, 2253, 2288, 2301, 2314, 2342,
     2377, 2390, 1980, 2403, 2416, 2451, 2464, 2477, 2512, 2525,
     2538, 1984, 2027, 2031, 2551, 2564, 2599, 2612, 2625, 2660,

     2673, 2686, 2045, 2699, 2094, 2712, 2049, 2747, 2760, 2795,
     2808, 2821, 2856, 2869, 2882, 2044,  309,    0,    0,   50,
      294,    0, 8254, 2085, 2090, 2146, 2151, 2895, 2908,    0,
        0, 2155,    0, 2921, 2934, 2175, 2188, 2947, 2186, 2159,
     2960, 2973,    0,    0,    0, 2261,    0,    0, 2987,  205,
      209, 2268, 2273, 2322, 3033, 3046, 3059,    0,    0, 2326,
     2339, 3072, 3085, 2351, 2364, 3098, 2362, 2424, 3111, 3124,
        0,    0,    0, 2428, 2441, 2485, 3137, 2492, 2497, 2572,
     2577, 3150, 3163,    0,    0, 2581,    0, 3176, 3189, 2634,
     2647, 3202, 2645, 2585, 3215, 3228,    0,    0,    0, 2720,

        0, 2727, 2732, 2768, 2773, 3241, 3254,    0,    0, 2777,
        0, 3267, 3280, 2830, 2843, 3293, 2841, 2781, 3306, 3319,
        0,    0,    0, 3323,    0, 3330, 3335, 3339, 3352, 3365,
     3378,    0,    0, 3382, 3395, 3401, 3414, 3419, 3432, 3438,
     3443, 3447, 3460, 3473,    0,    0,    0, 3477, 3490, 3487,
     3500, 3507, 3512, 3516, 3521, 3534, 3547,    0,    0, 3551,
        0, 3564, 3577, 3582, 3595, 3601, 3606, 3610, 3623, 3636,
        0,    0,    0, 3640,    0, 3653,  293,  276,  263,  257,
     3650, 3682, 3654, 3695, 3730, 3743, 3667, 3756, 3791, 3826,
     3664, 3861, 3874, 3909, 3922, 3935, 3970, 3983, 3996, 4009,

     4022, 3708, 4035, 4063, 4098, 4111, 4124, 4159, 4172, 4207,
     4220, 3668, 3705, 4233, 4246,    0, 3709, 4259, 3764, 4272,
     4307, 4320, 3722, 4333, 4368, 4403, 3772, 4438, 3805, 4451,
     4486, 4499, 3804, 4512, 4547, 4582, 3776, 4617, 4630, 4665,
     4678, 4691, 4726, 4739, 4752, 4765, 4778, 3818, 4791, 4819,
     4854, 4867, 4880, 4915, 4928, 4963, 4976, 3801, 3834, 4989,
     5002,    0, 3838, 5015, 3843, 5028, 5063, 5076, 3887, 5089,
     5124, 5159, 3893,  264,    0,  244,  247, 3890, 5194, 5207,
     3943, 5220, 3950, 3955, 4043, 4048, 5233, 5246,    0,    0,
     4052,    0, 5259, 5272, 4072, 4085, 4083, 4056, 5285, 5298,

     5311,    0,    0, 4132,    0, 5324, 5337, 4137, 4150, 5350,
     4181, 4185, 5363, 5376,    0,    0,    0, 4189,    0, 4280,
     5389, 5402, 4285, 4298, 4341, 5415, 5428, 4348, 5441, 4376,
     5454, 5467, 4383, 5480, 4411, 4353, 4193, 4388, 5493, 5506,
        0,    0, 4415,    0, 5519, 5532, 4420, 4464, 4462, 4424,
     5545, 5558, 5571,    0,    0, 4466,    0, 5584, 5597, 4471,
     4525, 5610, 4523, 4527, 5623, 5636,    0,    0,    0, 4531,
        0, 4555, 5649, 5662, 4560, 4573, 4590, 5675, 5688, 4597,
     5701, 4643,  240,    0,  219, 4601, 4643, 5714,    0,    0,
     5727,    0, 4656, 4699, 5740, 5753, 5766,    0, 4703, 5779,

     4708, 5792, 5827, 5840, 4804, 5853, 5888, 5923, 5958, 5971,
     4810, 5984, 6019, 6054, 4807, 6089, 6102, 6115, 4832, 6128,
     4811, 4829, 6163, 6176,    0, 6189, 6202, 4842, 4839, 6215,
     6228, 6241,    0, 4888, 4892, 6254, 6267,    0, 6280, 6293,
     4905, 4936, 6306, 6319, 6332,    0, 4940, 6345, 4945, 6358,
     6393, 6406, 5041, 6419, 6454, 6489, 6524, 6537, 5047, 6550,
     6585, 6620, 5044, 6655, 6668, 6681, 5102, 6694, 5048, 5099,
     6729, 6742,    0, 6755, 6768, 5112, 5109, 6781, 6794, 6807,
        0, 5137,  220,  201, 5138, 6820, 6833, 5145, 6846, 6859,
     5167, 6872, 6885, 5174, 6898, 5800, 5807, 6911, 5861, 5868,

     6924, 5896, 5187,  209,  184, 5811, 5872, 6937,    0,    0,
     6950,    0, 5909, 5906, 6963, 6976,    0,    0, 6989,    0,
     5936, 5933, 7002, 7015,    0,    0, 7028,    0, 5946, 5943,
     5992,    3,  266,  277, 5996, 6000, 6033, 6004, 6027,  431,
      444,  464, 6062, 6066, 6071, 6136, 6140,  477,  502,  528,
     6144, 6148, 6375, 6432,    0,  135, 6438,    0, 6375, 6046,
     6444, 6467, 6476, 6482, 6502, 6506, 6510, 6514, 6563, 6567,
     8254, 7042, 7050, 7058, 7066, 7074, 7079, 7086, 7094, 7102,
     7109, 7117, 7125, 7133, 7141, 7149, 7156,  157, 7163, 7171,
     7179, 7187,  104, 7195, 7203, 7211, 7219, 7227,   93, 7235,

     7243, 7248, 7255, 7263, 7270,   90, 7277, 7285, 7293,   66,
     7301, 7309, 7317, 7325, 7333, 7341, 7349, 7357, 7365, 7373,
     7381, 7389, 7397, 7405, 7413, 7418, 7425, 7433, 7441,   64,
     7449, 7457, 7465, 7473, 7481, 7489, 7497, 7505, 7513, 7521,
     7529, 7537, 7545, 7553, 7561, 7569, 7577, 7585, 7590, 7597,
     7605, 7613, 7621, 7629, 7637, 7645, 7653, 7661, 7669, 7677,
     7685, 7693, 7701, 7709, 7717, 7725, 7733, 7741, 7749, 7757,
     7765, 7773, 7781, 7789, 7797, 7805, 7810, 7817, 7825, 7833,
     7841, 7849, 7857, 7865, 7873, 7881, 7889, 7897, 7905, 7913,
     7921, 7929, 7937, 7945, 7953, 7961, 7969, 7977, 7985, 7993,

     8001, 8009, 8017, 8025, 8033, 8041, 8049, 8057, 8065, 8073,
     8081, 8089, 8097, 8105, 8113, 8121, 8129, 8137, 8145, 8153,
     8161, 8169, 8177, 8182, 8189, 8197, 8205, 8213, 8221, 8229,
     8237, 8245
    } ;

static const short int yy_def[1133] =
    {   0,
      972,  972,  971,    3,  972,  972,  972,    7,    7,    7,
        7,    7,    7,    7,    7,    7,  973,  973,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,  974,  974,    7,    7,    7,    7,  975,  975,
      975,  975,    7,    7,  971,  971,  971,  971,  976,  977,
      976,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,   72,  971,  971,  971,  971,  971,  971,  978,
      971,  979,  978,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,

      971,  971,  971,  971,  971,  971,  971,  980,  981,  980,
      971,  971,  971,  971,  971,  971,  982,  982,  971,  983,
      982,  971,  971,  971,  971,  971,  971,  976,  971,  984,
      976,  976,  976,  976,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  971,  971,  971,  971,
       67,  971,  971,  985,  971,  971,  971,   73,  971,  986,
      987,  971,  988,  971,   79,  971,  971,  989,  978,  979,
      979,  978,  971,  971,  971,  971,   89,  971,  971,  990,
      971,   92,  971,  971,  991,  971,   95,  971,  971,  992,
      971,  971,  971,  971,  971,  993,  971,  107,  971,  971,

      994,  980,  981,  981,  980,  971,  113,  971,  971,  995,
      971,  971,  971,  971,  996,  997,  997,  998,  998,  998,
      998,  971,  971,  999, 1000, 1000, 1000, 1001, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002,  971,  971,  971,
      971,  971,  971, 1003, 1003,  245,  245,  245,  245,  971,
      971,  971,  971, 1004, 1004, 1004, 1004, 1004,  258, 1005,
     1006,  971,  971,  971,  971, 1007, 1007,  267,  267,  267,
      267,  971,  971,  971,  971,  971,  990,  277,  277,  277,
      277,  277,  971,  971,  971,  971,  991,  287,  287,  287,
      287,  287,  971,  971,  971,  971,  992,  297,  297,  297,

      297,  297,  971,  993,  971,  971,  971,  971,  994,  309,
      309,  309,  309,  309,  971,  971,  971,  971,  995,  319,
      319,  319,  319,  319,  971,  971,  971,  971,  996,  329,
      329,  329,  329,  329,  999, 1001, 1002, 1002, 1002, 1002,
     1002, 1002, 1002,  971,  971,  971,  971,  971,  971, 1008,
      245,  351,  971, 1009,  971,  971, 1010,  258,  971,  971,
      971,  971, 1011,  267,  364,  971, 1012,  971,  971,  971,
      971,  971,  277,  971,  971,  971,  971, 1013,  287,  379,
      971, 1014,  971,  971,  971,  971, 1015, 1016, 1016,  971,
     1017,  971,  971,  971,  971,  971,  971, 1018, 1019, 1019,

      971, 1020,  971,  971,  971, 1021,  971,  971,  971,  971,
     1022, 1023, 1023,  971, 1024, 1025, 1026, 1026, 1026, 1026,
     1026, 1026,  971,  971,  971,  971,  971, 1027, 1027,  429,
      429,  429,  429, 1028, 1028,  435,  435, 1029,  971,  971,
      971, 1029,  442,  442,  442,  442,  442, 1030,  971,  449,
      449,  971,  971,  971,  971, 1031, 1031,  457,  457,  457,
      457, 1032, 1032,  463,  463, 1033,  971,  971,  971, 1033,
      470,  470,  470,  470,  470,  971, 1034,  971,  971,  971,
      971, 1035, 1035,  483,  483,  483,  483, 1036, 1036,  489,
      489, 1037,  971,  971,  971, 1037,  496,  496,  496,  496,

      496,  971,  971,  971,  971, 1038, 1038,  507,  507,  507,
      507, 1039, 1039,  513,  513, 1040,  971,  971,  971, 1040,
      520,  520,  520,  520,  520,  971,  971,  971,  971, 1041,
     1041,  531,  531,  531,  531, 1042, 1042,  537,  537, 1043,
      971,  971,  971, 1043,  544,  544,  544,  544,  544,  971,
     1044,  971,  971,  971,  971, 1045, 1045,  557,  557,  557,
      557, 1046, 1046,  563,  563, 1047,  971,  971,  971, 1047,
      570,  570,  570,  570,  570, 1048, 1049, 1049, 1049, 1049,
      971,  971,  971, 1050, 1051, 1051,  586,  586,  971, 1052,
      971,  971,  971,  971, 1053, 1054, 1054,  971, 1055, 1056,

     1056,  601,  601,  603,  971, 1057,  971, 1055, 1058, 1058,
     1057,  971,  971, 1059, 1059,  615,  971,  971,  971, 1060,
     1061, 1061,  622,  622,  971, 1062,  971,  971,  971, 1063,
     1064, 1064,  632,  632,  971, 1065,  971,  971,  971,  971,
     1066, 1067, 1067,  971, 1068, 1069, 1069,  647,  647,  649,
      971, 1070,  971, 1068, 1071, 1071, 1070,  971,  971, 1072,
     1072,  661,  971,  971,  971, 1073, 1074, 1074,  668,  668,
      971, 1075, 1076, 1077, 1077, 1077, 1077,  971, 1078, 1079,
      971, 1080,  971,  971,  971,  971, 1081, 1081,  688,  688,
      688,  688, 1082, 1082,  694,  694,  971,  971,  971, 1083,

     1083,  701,  701,  701,  701, 1084, 1084,  707,  707, 1085,
      971,  971,  971, 1085,  714,  714,  714,  714,  714,  971,
     1086, 1086,  722,  722,  971, 1087, 1088,  971, 1089,  971,
     1090, 1091,  971, 1092,  971,  971,  971,  971, 1093, 1093,
      740,  740,  740,  740, 1094, 1094,  746,  746,  971,  971,
      971, 1095, 1095,  753,  753,  753,  753, 1096, 1096,  759,
      759, 1097,  971,  971,  971, 1097,  766,  766,  766,  766,
      766,  971, 1098, 1098,  774,  774,  971, 1099, 1100,  971,
     1075, 1076, 1077, 1077, 1077,  971,  971, 1078,  788,  788,
     1079,  791,  791,  971,  971, 1101, 1101,  797,  971,  971,

      971, 1102, 1103, 1103,  804,  804,  971, 1104, 1105, 1105,
      810,  810,  971, 1106,  971,  971, 1107, 1107,  818,  818,
      971,  971, 1108, 1108,  824, 1109, 1109,  827,  971,  971,
     1110, 1110,  832,  971,  971, 1111, 1111,  837, 1112, 1112,
      840,  971,  971, 1113, 1113,  845,  971,  971,  971, 1114,
     1115, 1115,  852,  852,  971, 1116, 1117, 1117,  858,  858,
      971, 1118,  971,  971, 1119, 1119,  866,  866,  971,  971,
     1120, 1120,  872, 1121, 1121,  875,  971,  971, 1122, 1122,
      880, 1123, 1124, 1124,  971, 1125, 1126,  971, 1127, 1128,
      971, 1129, 1130,  971, 1114,  852,  971, 1116,  858,  971,

     1118,  866, 1123, 1124, 1124,  971,  971, 1125,  908,  908,
     1126,  911,  911,  971,  971, 1127,  916,  916, 1128,  919,
      919,  971,  971, 1129,  924,  924, 1130,  927,  927,  971,
      971,  895,  895,  895,  852,  852,  854,  971,  848,  898,
      898,  898,  858,  858,  860,  971,  864,  901,  901,  901,
      866,  866,  868, 1123, 1124, 1124, 1123, 1124, 1123, 1123,
     1131, 1131, 1131,  971, 1131,  971, 1132, 1132, 1132, 1132,
        0,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,

      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,

      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971
    } ;

static const short int yy_nxt[8302] =
    {   0,
      971,   47,   48,   47,  971,  971,   49,   47,   48,   47,
      739,  742,   49,   46,   47,   48,   47,   50,   46,   51,
       46,   46,   46,   46,   46,   46,   46,   50,   50,   52,
       53,   50,   54,   50,   50,   55,   50,   56,   57,   50,
       58,   59,   50,   50,   46,   46,   46,   50,   60,   61,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       47,   48,   47,  144,  145,   51,   47,   48,   47,  578,
      448,   51,  448,  579,  126,  127,  126,   62,   63,  128,
      129,  971,  129,   62,   63,  130,   64,  150,  151,  151,
      151,  151,   64,   47,   48,   47,  261,  971,   51,  335,

       65,   66,   67,   67,   67,   67,  152,  152,  152,  152,
      304,   63,   68,   69,   70,   70,   70,   70,   68,   69,
       70,   70,   70,   70,   71,   46,   72,   73,   73,   73,
       71,   46,   72,   73,   73,   73,   74,   46,   75,   76,
       76,   76,   74,   46,   75,   76,   76,   76,   77,   78,
       79,   79,   79,   79,   77,   78,   79,   79,   79,   79,
       47,   48,   47,  261,   81,   82,   47,   48,   47,  958,
       81,   82,   84,   85,   86,   86,   86,   86,   83,  155,
      156,  156,  156,  156,   83,   84,   85,   86,   86,   86,
       86,   87,   88,   89,   89,   89,   89,   87,   88,   89,

       89,   89,   89,   90,   91,   92,   92,   92,   92,   90,
       91,   92,   92,   92,   92,   93,   94,   95,   95,   95,
       95,  254,  956,  118,   48,  118,   96,  119,  120,  118,
       48,  118,  955,  119,  120,  254,  905,  254,   97,  254,
       98,   93,   94,   95,   95,   95,   95,  904,  132,  127,
      132,  254,   96,  133,  121,  254,  884,  118,   48,  118,
      121,  122,  120,  883,   97,  785,   98,   99,  100,  101,
      101,  101,  101,  739,  742,  118,   48,  118,   96,  122,
      120,  132,  127,  132,  739,  742,  133,  784,  121,  783,
       97,  677,   98,   99,  100,  101,  101,  101,  101,  157,

      157,  157,  157,  129,   96,  129,  121,  676,  130,  134,
      155,  156,  156,  156,  156,  675,   97,  674,   98,  102,
       46,  103,  104,  104,  104,  158,  158,  158,  158,  580,
       96,  577,  123,   46,  124,  125,  125,  125,  162,  162,
      162,  162,   97,   46,   98,  102,   46,  103,  104,  104,
      104,  162,  162,  162,  162,  423,   96,  422,  123,   46,
      124,  125,  125,  125,  166,  166,  166,  166,   97,   46,
       98,  105,  106,  107,  107,  107,  107,  164,  165,  165,
      165,  165,   96,  162,  162,  162,  162,  132,  127,  132,
      421,  131,  171,  420,   97,  419,   98,  105,  106,  107,

      107,  107,  107,  163,  175,  175,  175,  175,   96,  173,
      174,  174,  174,  174,  173,  174,  174,  174,  174,  163,
       97,  418,   98,   47,   48,   47,  417,   81,  109,  176,
      177,  177,  177,  177,  178,  178,  178,  178,  752,  755,
      345,  110,  181,  182,  182,  182,  182,  183,  183,  183,
      183,  752,  755,   97,  344,   98,   47,   48,   47,  343,
       81,  109,  186,  187,  187,  187,  187,  188,  188,  188,
      188,  752,  755,  342,  110,  192,  193,  193,  193,  193,
      194,  194,  194,  194,  766,  769,   97,  341,   98,  111,
      112,  113,  113,  113,  113,  192,  193,  193,  193,  193,

       96,  195,  195,  195,  195,  195,  195,  195,  195,  766,
      769,  340,   97,  339,   98,  111,  112,  113,  113,  113,
      113,  197,  198,  198,  198,  198,   96,  195,  195,  195,
      195,  199,  199,  199,  199,  766,  769,  338,   97,  337,
       98,  114,  115,  116,  116,  116,  116,  196,  239,  132,
      127,  132,   96,  131,  204,  206,  207,  207,  207,  207,
      217,  127,  217,  196,   97,  218,   98,  114,  115,  116,
      116,  116,  116,  208,  208,  208,  208,  238,   96,  131,
      237,  131,  211,  212,  212,  212,  212,  236,  235,  234,
       97,  233,   98,  153,  153,  153,  232,  231,  154,  230,

      229,  150,  151,  151,  151,  151,  159,  159,  159,  222,
      205,  160,  191,  172,  149,  158,  158,  158,  158,  213,
      213,  213,  213,  220,  127,  220,  148,  131,  221,  223,
      223,  223,  223,  147,  146,  161,  223,  223,  223,  223,
      223,  223,  223,  223,  126,  127,  126,  143,  142,  128,
      141,  161,  167,  167,  167,  140,  224,  168,  139,  138,
      164,  165,  165,  165,  165,  179,  179,  179,  137,  136,
      180,  971,  224,  176,  177,  177,  177,  177,  184,  184,
      184,  971,  971,  185,  971,  971,  181,  182,  182,  182,
      182,  189,  189,  189,  971,  971,  190,  971,  971,  186,

      187,  187,  187,  187,  200,  200,  200,  971,  971,  201,
      971,  971,  197,  198,  198,  198,  198,  209,  209,  209,
      971,  971,  210,  971,  971,  206,  207,  207,  207,  207,
      214,  214,  214,  971,  971,  215,  971,  971,  211,  212,
      212,  212,  212,  132,  127,  132,  971,  129,  133,  129,
      971,  226,  130,  226,  971,  971,  227,  132,  127,  132,
      971,  971,  133,  132,  127,  132,  971,  971,  133,  132,
      127,  132,  971,  971,  133,  132,  127,  132,  971,  971,
      133,  152,  152,  152,  152,  157,  157,  157,  157,  155,
      156,  156,  156,  156,  162,  162,  162,  162,  971,  228,

      153,  153,  153,  971,  971,  154,  971,  971,  971,  152,
      152,  152,  152,  159,  159,  159,  240,  971,  160,  166,
      166,  166,  166,  971,  971,  971,  157,  157,  157,  157,
      971,  971,  971,  250,  240,  153,  153,  153,  971,  971,
      154,  971,  241,  242,  243,  243,  243,  243,  245,  153,
      245,  250,  971,  246,  971,  247,  248,  249,  249,  249,
      249,  159,  159,  159,  971,  971,  160,  971,  251,  971,
      252,  253,  253,  253,  255,  159,  255,  971,  971,  256,
      971,  257,  971,  258,  259,  259,  259,  167,  167,  167,
      971,  971,  168,  971,  971,  971,  166,  166,  166,  166,

      132,  127,  132,  262,  131,  171,  132,  127,  132,  971,
      131,  171,  175,  175,  175,  175,  173,  174,  174,  174,
      174,  262,  167,  167,  167,  971,  971,  168,  971,  263,
      264,  265,  265,  265,  265,  267,  167,  267,  971,  971,
      268,  971,  269,  270,  271,  271,  271,  271,  175,  175,
      175,  175,  971,  971,  971,  272,  178,  178,  178,  178,
      183,  183,  183,  183,  188,  188,  188,  188,  194,  194,
      194,  194,  971,  272,  179,  179,  179,  971,  971,  180,
      971,  971,  971,  178,  178,  178,  178,  971,  971,  971,
      273,  192,  193,  193,  193,  193,  195,  195,  195,  195,

      194,  194,  194,  194,  971,  971,  971,  303,  273,  179,
      179,  179,  971,  971,  180,  971,  274,  275,  276,  276,
      276,  276,  278,  179,  278,  303,  971,  279,  971,  280,
      281,  282,  282,  282,  282,  184,  184,  184,  971,  971,
      185,  971,  971,  971,  183,  183,  183,  183,  971,  971,
      971,  283,  199,  199,  199,  199,  971,  132,  127,  132,
      971,  131,  204,  208,  208,  208,  208,  971,  971,  283,
      184,  184,  184,  971,  971,  185,  971,  284,  285,  286,
      286,  286,  286,  288,  184,  288,  971,  131,  289,  131,
      290,  291,  292,  292,  292,  292,  189,  189,  189,  971,

      971,  190,  971,  971,  971,  188,  188,  188,  188,  971,
      971,  971,  293,  213,  213,  213,  213,  971,  132,  127,
      132,  971,  131,  204,  217,  127,  217,  971,  971,  218,
      293,  189,  189,  189,  971,  971,  190,  971,  294,  295,
      296,  296,  296,  296,  298,  189,  298,  971,  131,  299,
      131,  300,  301,  302,  302,  302,  302,  200,  200,  200,
      971,  971,  201,  971,  971,  971,  199,  199,  199,  199,
      220,  127,  220,  305,  131,  221,  220,  127,  220,  971,
      131,  221,  220,  127,  220,  971,  131,  221,  971,  971,
      971,  305,  200,  200,  200,  971,  971,  201,  971,  306,

      307,  308,  308,  308,  308,  310,  200,  310,  971,  971,
      311,  971,  312,  313,  314,  314,  314,  314,  209,  209,
      209,  971,  971,  210,  971,  971,  971,  208,  208,  208,
      208,  220,  127,  220,  315,  131,  221,  223,  223,  223,
      223,  226,  226,  226,  226,  971,  227,  227,  348,  348,
      348,  348,  315,  209,  209,  209,  971,  971,  210,  971,
      316,  317,  318,  318,  318,  318,  320,  209,  320,  971,
      971,  321,  971,  322,  323,  324,  324,  324,  324,  214,
      214,  214,  971,  971,  215,  971,  971,  211,  212,  212,
      212,  212,  214,  214,  214,  971,  971,  215,  971,  971,

      971,  213,  213,  213,  213,  226,  971,  226,  325,  971,
      227,  132,  127,  132,  346,  346,  133,  347,  347,  347,
      347,  242,  243,  243,  243,  243,  325,  214,  214,  214,
      971,  336,  215,  971,  326,  327,  328,  328,  328,  328,
      330,  214,  330,  971,  971,  331,  971,  332,  333,  334,
      334,  334,  334,  349,  349,  349,  971,  971,  350,  971,
      971,  242,  243,  243,  243,  243,  245,  153,  245,  971,
      971,  246,  971,  247,  248,  249,  249,  249,  249,  245,
      153,  245,  971,  971,  246,  971,  247,  248,  249,  249,
      249,  249,  351,  351,  351,  351,  352,  353,  352,  355,

      355,  354,  356,  356,  356,  356,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  159,  159,
      159,  359,  359,  160,  360,  360,  360,  360,  971,  971,
      357,  264,  265,  265,  265,  265,  361,  361,  361,  361,
      364,  364,  364,  364,  971,  971,  357,  255,  159,  255,
      971,  971,  256,  971,  257,  971,  258,  259,  259,  259,
      255,  159,  255,  971,  971,  256,  971,  257,  971,  258,
      259,  259,  259,  255,  159,  255,  971,  971,  256,  971,
      257,  971,  258,  259,  259,  259,  255,  159,  255,  971,
      971,  256,  971,  257,  971,  258,  259,  259,  259,  255,

      159,  255,  971,  971,  256,  971,  257,  971,  258,  259,
      259,  259,  365,  366,  365,  368,  368,  367,  369,  369,
      369,  369,  372,  372,  372,  372,  370,  370,  358,  371,
      371,  371,  371,  275,  276,  276,  276,  276,  275,  276,
      276,  276,  276,  971,  358,  362,  362,  362,  971,  971,
      363,  971,  971,  264,  265,  265,  265,  265,  267,  167,
      267,  971,  971,  268,  971,  269,  270,  271,  271,  271,
      271,  267,  167,  267,  971,  971,  268,  971,  269,  270,
      271,  271,  271,  271,  278,  179,  278,  971,  971,  279,
      971,  280,  281,  282,  282,  282,  282,  373,  373,  373,

      373,  374,  374,  971,  375,  375,  375,  375,  285,  286,
      286,  286,  286,  376,  376,  376,  376,  377,  377,  377,
      971,  971,  378,  971,  971,  285,  286,  286,  286,  286,
      288,  184,  288,  971,  971,  289,  971,  290,  291,  292,
      292,  292,  292,  379,  379,  379,  379,  380,  381,  380,
      383,  383,  382,  384,  384,  384,  384,  295,  296,  296,
      296,  296,  385,  385,  385,  385,  386,  386,  386,  971,
      971,  387,  971,  971,  295,  296,  296,  296,  296,  298,
      189,  298,  971,  971,  299,  971,  300,  301,  302,  302,
      302,  302,  388,  388,  388,  388,  389,  390,  389,  392,

      392,  391,  393,  393,  393,  393,  394,  394,  971,  395,
      395,  395,  395,  307,  308,  308,  308,  308,  396,  396,
      396,  396,  397,  397,  397,  971,  971,  398,  971,  971,
      307,  308,  308,  308,  308,  310,  200,  310,  971,  971,
      311,  971,  312,  313,  314,  314,  314,  314,  399,  399,
      399,  399,  400,  401,  400,  403,  403,  402,  404,  404,
      404,  404,  317,  318,  318,  318,  318,  405,  405,  405,
      405,  317,  318,  318,  318,  318,  320,  209,  320,  971,
      971,  321,  971,  322,  323,  324,  324,  324,  324,  406,
      406,  406,  406,  407,  407,  971,  408,  408,  408,  408,

      327,  328,  328,  328,  328,  409,  409,  409,  409,  410,
      410,  410,  971,  971,  411,  971,  971,  327,  328,  328,
      328,  328,  330,  214,  330,  971,  971,  331,  971,  332,
      333,  334,  334,  334,  334,  412,  412,  412,  412,  413,
      414,  413,  971,  971,  415,  132,  127,  132,  971,  971,
      133,  347,  347,  347,  347,  356,  356,  356,  356,  356,
      356,  356,  356,  971,  416,  153,  153,  153,  971,  971,
      154,  971,  971,  971,  347,  347,  347,  347,  349,  349,
      349,  971,  971,  350,  971,  971,  971,  348,  348,  348,
      348,  971,  971,  971,  424,  360,  360,  360,  360,  369,

      369,  369,  369,  369,  369,  369,  369,  371,  371,  371,
      371,  971,  424,  349,  349,  349,  971,  971,  350,  971,
      425,  426,  427,  427,  427,  427,  429,  349,  429,  971,
      971,  430,  971,  431,  432,  433,  433,  433,  433,  352,
      353,  352,  971,  971,  354,  971,  971,  971,  351,  351,
      351,  351,  971,  971,  971,  434,  372,  372,  372,  372,
      971,  971,  971,  476,  373,  373,  373,  373,  971,  971,
      971,  477,  971,  434,  435,  436,  437,  437,  437,  437,
      971,  476,  971,  244,  375,  375,  375,  375,  971,  477,
      384,  384,  384,  384,  393,  393,  393,  393,  971,  971,

      971,  244,  353,  353,  353,  971,  971,  438,  971,  439,
      440,  441,  441,  441,  441,  443,  353,  443,  971,  971,
      444,  971,  445,  446,  447,  447,  447,  447,  449,  450,
      450,  450,  451,  451,  451,  451,  451,  393,  393,  393,
      393,  395,  395,  395,  395,  132,  127,  576,  254,  971,
      133,  971,  451,  451,  451,  404,  404,  404,  404,  408,
      408,  408,  408,  971,  254,  167,  167,  167,  971,  971,
      168,  971,  971,  971,  360,  360,  360,  360,  362,  362,
      362,  971,  971,  363,  971,  971,  971,  361,  361,  361,
      361,  971,  581,  581,  452,  582,  582,  582,  582,  426,

      427,  427,  427,  427,  405,  405,  405,  405,  971,  971,
      971,  550,  452,  362,  362,  362,  971,  971,  363,  971,
      453,  454,  455,  455,  455,  455,  457,  362,  457,  550,
      971,  458,  971,  459,  460,  461,  461,  461,  461,  365,
      366,  365,  971,  971,  367,  971,  971,  971,  364,  364,
      364,  364,  971,  971,  971,  462,  583,  583,  583,  583,
      426,  427,  427,  427,  427,  584,  584,  584,  584,  589,
      589,  589,  589,  462,  463,  464,  465,  465,  465,  465,
      971,  971,  971,  266,  248,  588,  588,  588,  588,  352,
      353,  352,  971,  971,  354,  440,  441,  441,  441,  441,

      971,  266,  366,  366,  366,  971,  971,  466,  971,  467,
      468,  469,  469,  469,  469,  471,  366,  471,  971,  971,
      472,  971,  473,  474,  475,  475,  475,  475,  179,  179,
      179,  971,  971,  180,  971,  971,  971,  371,  371,  371,
      371,  184,  184,  184,  971,  971,  185,  971,  971,  971,
      375,  375,  375,  375,  377,  377,  377,  971,  971,  378,
      971,  971,  971,  376,  376,  376,  376,  971,  971,  971,
      478,  590,  590,  590,  590,  591,  591,  971,  592,  592,
      592,  592,  454,  455,  455,  455,  455,  971,  478,  377,
      377,  377,  971,  971,  378,  971,  479,  480,  481,  481,

      481,  481,  483,  377,  483,  971,  971,  484,  971,  485,
      486,  487,  487,  487,  487,  380,  381,  380,  971,  971,
      382,  971,  971,  971,  379,  379,  379,  379,  971,  971,
      971,  488,  593,  593,  593,  593,  596,  596,  596,  596,
      597,  598,  597,  971,  971,  599,  971,  971,  971,  488,
      489,  490,  491,  491,  491,  491,  971,  971,  971,  287,
      270,  603,  603,  603,  603,  604,  605,  604,  971,  971,
      606,  468,  469,  469,  469,  469,  971,  287,  381,  381,
      381,  971,  971,  492,  971,  493,  494,  495,  495,  495,
      495,  497,  381,  497,  971,  971,  498,  971,  499,  500,

      501,  501,  501,  501,  189,  189,  189,  971,  971,  190,
      971,  971,  971,  384,  384,  384,  384,  386,  386,  386,
      971,  971,  387,  971,  971,  971,  385,  385,  385,  385,
      971,  971,  971,  502,  607,  607,  607,  607,  609,  609,
      609,  609,  610,  605,  610,  971,  971,  611,  971,  971,
      971,  502,  386,  386,  386,  971,  971,  387,  971,  503,
      504,  505,  505,  505,  505,  507,  386,  507,  971,  971,
      508,  971,  509,  510,  511,  511,  511,  511,  389,  390,
      389,  971,  971,  391,  971,  300,  301,  388,  388,  388,
      388,  971,  612,  612,  512,  613,  613,  613,  613,  617,

      617,  971,  618,  618,  618,  618,  480,  481,  481,  481,
      481,  971,  512,  389,  390,  389,  971,  971,  391,  971,
      513,  514,  515,  515,  515,  515,  390,  390,  390,  971,
      971,  516,  971,  517,  518,  519,  519,  519,  519,  521,
      390,  521,  971,  971,  522,  971,  523,  524,  525,  525,
      525,  525,  200,  200,  200,  971,  971,  201,  971,  971,
      971,  395,  395,  395,  395,  397,  397,  397,  971,  971,
      398,  971,  971,  971,  396,  396,  396,  396,  971,  971,
      971,  526,  619,  619,  619,  619,  480,  481,  481,  481,
      481,  620,  620,  620,  620,  625,  625,  625,  625,  526,

      397,  397,  397,  971,  971,  398,  971,  527,  528,  529,
      529,  529,  529,  531,  397,  531,  971,  971,  532,  971,
      533,  534,  535,  535,  535,  535,  400,  401,  400,  971,
      971,  402,  971,  312,  313,  399,  399,  399,  399,  971,
      971,  971,  536,  291,  624,  624,  624,  624,  380,  381,
      380,  971,  971,  382,  494,  495,  495,  495,  495,  971,
      536,  400,  401,  400,  971,  971,  402,  971,  537,  538,
      539,  539,  539,  539,  401,  401,  401,  971,  971,  540,
      971,  541,  542,  543,  543,  543,  543,  545,  401,  545,
      971,  971,  546,  971,  547,  548,  549,  549,  549,  549,

      209,  209,  209,  971,  971,  210,  971,  971,  971,  404,
      404,  404,  404,  320,  209,  320,  971,  971,  321,  971,
      322,  323,  406,  406,  406,  406,  971,  971,  971,  551,
      626,  626,  626,  626,  627,  627,  971,  628,  628,  628,
      628,  504,  505,  505,  505,  505,  971,  551,  214,  214,
      214,  971,  971,  215,  971,  971,  971,  408,  408,  408,
      408,  410,  410,  410,  971,  971,  411,  971,  971,  971,
      409,  409,  409,  409,  971,  971,  971,  552,  629,  629,
      629,  629,  504,  505,  505,  505,  505,  630,  630,  630,
      630,  635,  635,  635,  635,  552,  410,  410,  410,  971,

      971,  411,  971,  553,  554,  555,  555,  555,  555,  557,
      410,  557,  971,  971,  558,  971,  559,  560,  561,  561,
      561,  561,  413,  414,  413,  971,  971,  415,  971,  332,
      333,  412,  412,  412,  412,  971,  971,  971,  562,  301,
      634,  634,  634,  634,  389,  390,  389,  971,  971,  391,
      518,  519,  519,  519,  519,  971,  562,  413,  414,  413,
      971,  971,  415,  971,  563,  564,  565,  565,  565,  565,
      414,  414,  414,  971,  971,  566,  971,  567,  568,  569,
      569,  569,  569,  571,  414,  571,  971,  971,  572,  971,
      573,  574,  575,  575,  575,  575,  429,  349,  429,  971,

      971,  430,  971,  431,  432,  433,  433,  433,  433,  429,
      349,  429,  971,  971,  430,  971,  431,  432,  433,  433,
      433,  433,  245,  153,  245,  971,  971,  246,  585,  586,
      248,  587,  587,  587,  587,  245,  153,  245,  971,  971,
      246,  971,  247,  436,  437,  437,  437,  437,  443,  353,
      443,  971,  971,  444,  971,  445,  446,  447,  447,  447,
      447,  349,  349,  349,  971,  971,  350,  971,  971,  440,
      441,  441,  441,  441,  443,  353,  443,  971,  971,  444,
      971,  445,  446,  447,  447,  447,  447,  254,  255,  159,
      255,  254,  254,  256,  254,  257,  254,  449,  450,  450,

      450,  451,  451,  451,  451,  451,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  358,  254,  254,
      254,  451,  451,  451,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  358,  594,  594,  594,  971,  971,  595,
      971,  971,  454,  455,  455,  455,  455,  457,  362,  457,
      971,  971,  458,  971,  459,  460,  461,  461,  461,  461,
      457,  362,  457,  971,  971,  458,  971,  459,  460,  461,
      461,  461,  461,  267,  167,  267,  971,  971,  268,  600,
      601,  270,  602,  602,  602,  602,  267,  167,  267,  971,
      971,  268,  971,  269,  464,  465,  465,  465,  465,  471,

      366,  471,  971,  971,  472,  971,  473,  474,  475,  475,
      475,  475,  598,  598,  598,  971,  971,  608,  971,  971,
      468,  469,  469,  469,  469,  471,  366,  471,  971,  971,
      472,  971,  473,  474,  475,  475,  475,  475,  278,  179,
      278,  971,  971,  279,  614,  615,  281,  616,  616,  616,
      616,  483,  377,  483,  971,  971,  484,  971,  485,  486,
      487,  487,  487,  487,  483,  377,  483,  971,  971,  484,
      971,  485,  486,  487,  487,  487,  487,  288,  184,  288,
      971,  971,  289,  621,  622,  291,  623,  623,  623,  623,
      288,  184,  288,  971,  971,  289,  971,  290,  490,  491,

      491,  491,  491,  497,  381,  497,  971,  971,  498,  971,
      499,  500,  501,  501,  501,  501,  377,  377,  377,  971,
      971,  378,  971,  971,  494,  495,  495,  495,  495,  497,
      381,  497,  971,  971,  498,  971,  499,  500,  501,  501,
      501,  501,  507,  386,  507,  971,  971,  508,  971,  509,
      510,  511,  511,  511,  511,  507,  386,  507,  971,  971,
      508,  971,  509,  510,  511,  511,  511,  511,  298,  189,
      298,  971,  971,  299,  631,  632,  301,  633,  633,  633,
      633,  298,  189,  298,  971,  971,  299,  971,  300,  514,
      515,  515,  515,  515,  521,  390,  521,  971,  971,  522,

      971,  523,  524,  525,  525,  525,  525,  386,  386,  386,
      971,  971,  387,  971,  971,  518,  519,  519,  519,  519,
      521,  390,  521,  971,  971,  522,  971,  523,  524,  525,
      525,  525,  525,  636,  636,  636,  636,  637,  637,  971,
      638,  638,  638,  638,  528,  529,  529,  529,  529,  639,
      639,  639,  639,  640,  640,  640,  971,  971,  641,  971,
      971,  528,  529,  529,  529,  529,  531,  397,  531,  971,
      971,  532,  971,  533,  534,  535,  535,  535,  535,  531,
      397,  531,  971,  971,  532,  971,  533,  534,  535,  535,
      535,  535,  642,  642,  642,  642,  643,  644,  643,  971,

      971,  645,  310,  200,  310,  971,  971,  311,  646,  647,
      313,  648,  648,  648,  648,  310,  200,  310,  971,  971,
      311,  971,  312,  538,  539,  539,  539,  539,  313,  649,
      649,  649,  649,  650,  651,  650,  971,  971,  652,  545,
      401,  545,  971,  971,  546,  971,  547,  548,  549,  549,
      549,  549,  542,  543,  543,  543,  543,  653,  653,  653,
      653,  644,  644,  644,  971,  971,  654,  971,  971,  542,
      543,  543,  543,  543,  545,  401,  545,  971,  971,  546,
      971,  547,  548,  549,  549,  549,  549,  655,  655,  655,
      655,  656,  651,  656,  658,  658,  657,  659,  659,  659,

      659,  320,  209,  320,  971,  971,  321,  660,  661,  323,
      662,  662,  662,  662,  663,  663,  971,  664,  664,  664,
      664,  554,  555,  555,  555,  555,  665,  665,  665,  665,
      554,  555,  555,  555,  555,  557,  410,  557,  971,  971,
      558,  971,  559,  560,  561,  561,  561,  561,  557,  410,
      557,  971,  971,  558,  971,  559,  560,  561,  561,  561,
      561,  666,  666,  666,  666,  330,  214,  330,  971,  971,
      331,  667,  668,  333,  669,  669,  669,  669,  330,  214,
      330,  971,  971,  331,  971,  332,  564,  565,  565,  565,
      565,  333,  670,  670,  670,  670,  413,  414,  413,  971,

      971,  415,  571,  414,  571,  971,  971,  572,  971,  573,
      574,  575,  575,  575,  575,  568,  569,  569,  569,  569,
      671,  671,  671,  671,  410,  410,  410,  971,  971,  411,
      971,  971,  568,  569,  569,  569,  569,  571,  414,  571,
      971,  971,  572,  971,  573,  574,  575,  575,  575,  575,
      672,  672,  672,  672,  132,  127,  132,  971,  971,  133,
      582,  582,  582,  582,  583,  583,  583,  583,  352,  353,
      352,  678,  971,  354,  592,  592,  592,  592,  613,  613,
      613,  613,  673,  349,  349,  349,  971,  971,  350,  678,
      971,  971,  582,  582,  582,  582,  429,  349,  429,  971,

      971,  430,  971,  431,  432,  584,  584,  584,  584,  365,
      366,  365,  679,  971,  367,  613,  613,  613,  613,  618,
      618,  618,  618,  380,  381,  380,  971,  971,  382,  971,
      679,  245,  153,  245,  971,  971,  246,  971,  247,  248,
      587,  587,  587,  587,  245,  153,  245,  971,  971,  246,
      971,  247,  248,  587,  587,  587,  587,  352,  353,  352,
      971,  971,  354,  971,  971,  971,  588,  588,  588,  588,
      971,  971,  971,  680,  619,  619,  619,  619,  971,  971,
      971,  725,  628,  628,  628,  628,  638,  638,  638,  638,
      971,  680,  349,  349,  349,  971,  971,  350,  971,  725,

      971,  589,  589,  589,  589,  389,  390,  389,  681,  971,
      391,  659,  659,  659,  659,  629,  629,  629,  629,  400,
      401,  400,  730,  971,  402,  971,  681,  443,  353,  443,
      971,  971,  444,  971,  445,  446,  590,  590,  590,  590,
      730,  971,  971,  682,  659,  659,  659,  659,  664,  664,
      664,  664,  971,  665,  665,  665,  665,  971,  971,  971,
      777,  682,  362,  362,  362,  971,  971,  363,  971,  971,
      971,  592,  592,  592,  592,  594,  594,  594,  777,  971,
      595,  971,  971,  971,  593,  593,  593,  593,  413,  414,
      413,  683,  971,  415,  132,  127,  132,  786,  786,  133,

      787,  787,  787,  787,  971,  782,  971,  971,  971,  683,
      594,  594,  594,  971,  971,  595,  971,  684,  685,  686,
      686,  686,  686,  688,  594,  688,  971,  971,  689,  971,
      690,  691,  692,  692,  692,  692,  597,  598,  597,  971,
      971,  599,  971,  459,  460,  596,  596,  596,  596,  971,
      794,  794,  693,  795,  795,  795,  795,  799,  799,  971,
      800,  800,  800,  800,  685,  686,  686,  686,  686,  971,
      693,  597,  598,  597,  971,  971,  599,  971,  694,  695,
      696,  696,  696,  696,  598,  598,  598,  971,  971,  608,
      971,  697,  698,  699,  699,  699,  699,  701,  598,  701,

      971,  971,  702,  971,  703,  704,  705,  705,  705,  705,
      267,  167,  267,  971,  971,  268,  971,  269,  270,  602,
      602,  602,  602,  267,  167,  267,  971,  971,  268,  971,
      269,  270,  602,  602,  602,  602,  604,  605,  604,  971,
      971,  606,  971,  971,  971,  603,  603,  603,  603,  971,
      971,  971,  706,  801,  801,  801,  801,  685,  686,  686,
      686,  686,  802,  802,  802,  802,  807,  807,  807,  807,
      706,  707,  708,  709,  709,  709,  709,  971,  971,  971,
      266,  460,  806,  806,  806,  806,  597,  598,  597,  971,
      971,  599,  698,  699,  699,  699,  699,  971,  266,  605,

      605,  605,  971,  971,  710,  971,  711,  712,  713,  713,
      713,  713,  715,  605,  715,  971,  971,  716,  971,  717,
      718,  719,  719,  719,  719,  598,  598,  598,  971,  971,
      608,  971,  971,  971,  607,  607,  607,  607,  971,  971,
      971,  720,  808,  808,  808,  808,  270,  812,  812,  812,
      812,  604,  605,  604,  971,  971,  606,  971,  971,  720,
      701,  598,  701,  971,  971,  702,  971,  703,  704,  705,
      705,  705,  705,  610,  605,  610,  971,  971,  611,  971,
      473,  474,  609,  609,  609,  609,  971,  971,  971,  721,
      712,  713,  713,  713,  713,  813,  813,  813,  813,  814,

      814,  814,  814,  849,  849,  849,  849,  721,  610,  605,
      610,  971,  971,  611,  971,  722,  723,  724,  724,  724,
      724,  715,  605,  715,  971,  971,  716,  971,  717,  718,
      719,  719,  719,  719,  278,  179,  278,  971,  971,  279,
      971,  280,  281,  616,  616,  616,  616,  278,  179,  278,
      971,  971,  279,  971,  280,  281,  616,  616,  616,  616,
      377,  377,  377,  971,  971,  378,  971,  971,  971,  618,
      618,  618,  618,  483,  377,  483,  971,  971,  484,  971,
      485,  486,  620,  620,  620,  620,  971,  815,  815,  726,
      816,  816,  816,  816,  474,  820,  820,  820,  820,  610,

      605,  610,  971,  971,  611,  971,  971,  726,  288,  184,
      288,  971,  971,  289,  971,  290,  291,  623,  623,  623,
      623,  288,  184,  288,  971,  971,  289,  971,  290,  291,
      623,  623,  623,  623,  380,  381,  380,  971,  971,  382,
      971,  971,  971,  624,  624,  624,  624,  971,  821,  821,
      727,  822,  822,  822,  822,  829,  829,  971,  830,  830,
      830,  830,  737,  738,  738,  738,  738,  971,  727,  377,
      377,  377,  971,  971,  378,  971,  971,  971,  625,  625,
      625,  625,  971,  834,  834,  728,  835,  835,  835,  835,
      842,  842,  971,  843,  843,  843,  843,  737,  738,  738,

      738,  738,  971,  728,  497,  381,  497,  971,  971,  498,
      971,  499,  500,  626,  626,  626,  626,  971,  847,  847,
      729,  848,  848,  848,  848,  850,  850,  850,  850,  534,
      854,  854,  854,  854,  855,  855,  855,  855,  729,  386,
      386,  386,  971,  971,  387,  971,  971,  971,  628,  628,
      628,  628,  507,  386,  507,  971,  971,  508,  971,  509,
      510,  630,  630,  630,  630,  643,  644,  643,  731,  971,
      645,  750,  751,  751,  751,  751,  856,  856,  856,  856,
      313,  860,  860,  860,  860,  971,  731,  298,  189,  298,
      971,  971,  299,  971,  300,  301,  633,  633,  633,  633,

      298,  189,  298,  971,  971,  299,  971,  300,  301,  633,
      633,  633,  633,  389,  390,  389,  971,  971,  391,  971,
      971,  971,  634,  634,  634,  634,  650,  651,  650,  732,
      971,  652,  764,  765,  765,  765,  765,  861,  861,  861,
      861,  862,  862,  862,  862,  971,  971,  732,  386,  386,
      386,  971,  971,  387,  971,  971,  971,  635,  635,  635,
      635,  971,  863,  863,  733,  864,  864,  864,  864,  548,
      868,  868,  868,  868,  656,  651,  656,  971,  971,  657,
      971,  971,  733,  521,  390,  521,  971,  971,  522,  971,
      523,  524,  636,  636,  636,  636,  971,  869,  869,  734,

      870,  870,  870,  870,  877,  877,  971,  878,  878,  878,
      878,  787,  787,  787,  787,  971,  971,  734,  397,  397,
      397,  971,  971,  398,  971,  971,  971,  638,  638,  638,
      638,  640,  640,  640,  971,  971,  641,  971,  971,  971,
      639,  639,  639,  639,  132,  127,  132,  735,  971,  133,
      971,  971,  882,  787,  787,  787,  787,  352,  353,  352,
      971,  971,  354,  971,  971,  735,  640,  640,  640,  971,
      971,  641,  971,  736,  737,  738,  738,  738,  738,  740,
      640,  740,  971,  971,  741,  971,  742,  743,  744,  744,
      744,  744,  643,  644,  643,  971,  971,  645,  971,  533,

      534,  642,  642,  642,  642,  971,  971,  971,  745,  795,
      795,  795,  795,  800,  800,  800,  800,  971,  801,  801,
      801,  801,  971,  971,  971,  885,  745,  643,  644,  643,
      971,  971,  645,  971,  746,  747,  748,  748,  748,  748,
      644,  644,  644,  885,  971,  654,  971,  749,  750,  751,
      751,  751,  751,  753,  644,  753,  971,  971,  754,  971,
      755,  756,  757,  757,  757,  757,  310,  200,  310,  971,
      971,  311,  971,  312,  313,  648,  648,  648,  648,  310,
      200,  310,  971,  971,  311,  971,  312,  313,  648,  648,
      648,  648,  650,  651,  650,  971,  971,  652,  971,  971,

      971,  649,  649,  649,  649,  597,  598,  597,  758,  971,
      599,  604,  605,  604,  971,  971,  606,  816,  816,  816,
      816,  822,  822,  822,  822,  971,  758,  759,  760,  761,
      761,  761,  761,  610,  605,  610,  309,  971,  611,  822,
      822,  822,  822,  380,  381,  380,  971,  971,  382,  830,
      830,  830,  830,  971,  309,  651,  651,  651,  971,  971,
      762,  971,  763,  764,  765,  765,  765,  765,  767,  651,
      767,  971,  971,  768,  971,  769,  770,  771,  771,  771,
      771,  644,  644,  644,  971,  971,  654,  971,  971,  971,
      653,  653,  653,  653,  971,  971,  971,  772,  835,  835,

      835,  835,  835,  835,  835,  835,  389,  390,  389,  971,
      971,  391,  971,  971,  971,  772,  753,  644,  753,  971,
      971,  754,  971,  755,  756,  757,  757,  757,  757,  656,
      651,  656,  971,  971,  657,  971,  547,  548,  655,  655,
      655,  655,  971,  971,  971,  773,  843,  843,  843,  843,
      848,  848,  848,  848,  971,  849,  849,  849,  849,  971,
      971,  971,  894,  773,  656,  651,  656,  971,  971,  657,
      971,  774,  775,  776,  776,  776,  776,  767,  651,  767,
      894,  971,  768,  971,  769,  770,  771,  771,  771,  771,
      320,  209,  320,  971,  971,  321,  971,  322,  323,  662,

      662,  662,  662,  320,  209,  320,  971,  971,  321,  971,
      322,  323,  662,  662,  662,  662,  410,  410,  410,  971,
      971,  411,  971,  971,  971,  664,  664,  664,  664,  557,
      410,  557,  971,  971,  558,  971,  559,  560,  666,  666,
      666,  666,  643,  644,  643,  778,  971,  645,  650,  651,
      650,  971,  971,  652,  864,  864,  864,  864,  870,  870,
      870,  870,  971,  778,  330,  214,  330,  971,  971,  331,
      971,  332,  333,  669,  669,  669,  669,  330,  214,  330,
      971,  971,  331,  971,  332,  333,  669,  669,  669,  669,
      413,  414,  413,  971,  971,  415,  971,  971,  971,  670,

      670,  670,  670,  656,  651,  656,  779,  971,  657,  870,
      870,  870,  870,  413,  414,  413,  971,  971,  415,  878,
      878,  878,  878,  971,  779,  410,  410,  410,  971,  971,
      411,  971,  971,  971,  671,  671,  671,  671,  132,  127,
      132,  780,  971,  133,  971,  906,  906,  903,  907,  907,
      907,  907,  914,  914,  971,  915,  915,  915,  915,  780,
      571,  414,  571,  971,  971,  572,  971,  573,  574,  672,
      672,  672,  672,  971,  922,  922,  781,  923,  923,  923,
      923,  930,  930,  971,  931,  931,  931,  931,  132,  127,
      954,  971,  971,  133,  781,  429,  349,  429,  971,  971,

      430,  788,  789,  432,  790,  790,  790,  790,  245,  153,
      245,  971,  971,  246,  791,  792,  248,  793,  793,  793,
      793,  443,  353,  443,  971,  971,  444,  796,  797,  446,
      798,  798,  798,  798,  688,  594,  688,  971,  971,  689,
      971,  690,  691,  692,  692,  692,  692,  688,  594,  688,
      971,  971,  689,  971,  690,  691,  692,  692,  692,  692,
      457,  362,  457,  971,  971,  458,  803,  804,  460,  805,
      805,  805,  805,  457,  362,  457,  971,  971,  458,  971,
      459,  695,  696,  696,  696,  696,  594,  594,  594,  971,
      971,  595,  971,  971,  698,  699,  699,  699,  699,  701,

      598,  701,  971,  971,  702,  971,  703,  704,  705,  705,
      705,  705,  701,  598,  701,  971,  971,  702,  971,  703,
      704,  705,  705,  705,  705,  267,  167,  267,  971,  971,
      268,  809,  810,  270,  811,  811,  811,  811,  267,  167,
      267,  971,  971,  268,  971,  269,  708,  709,  709,  709,
      709,  715,  605,  715,  971,  971,  716,  971,  717,  718,
      719,  719,  719,  719,  598,  598,  598,  971,  971,  608,
      971,  971,  712,  713,  713,  713,  713,  715,  605,  715,
      971,  971,  716,  971,  717,  718,  719,  719,  719,  719,
      471,  366,  471,  971,  971,  472,  817,  818,  474,  819,

      819,  819,  819,  471,  366,  471,  971,  971,  472,  971,
      473,  723,  724,  724,  724,  724,  483,  377,  483,  971,
      971,  484,  823,  824,  486,  825,  825,  825,  825,  288,
      184,  288,  971,  971,  289,  826,  827,  291,  828,  828,
      828,  828,  497,  381,  497,  971,  971,  498,  831,  832,
      500,  833,  833,  833,  833,  507,  386,  507,  971,  971,
      508,  836,  837,  510,  838,  838,  838,  838,  298,  189,
      298,  971,  971,  299,  839,  840,  301,  841,  841,  841,
      841,  521,  390,  521,  971,  971,  522,  844,  845,  524,
      846,  846,  846,  846,  740,  640,  740,  971,  971,  741,

      971,  742,  743,  744,  744,  744,  744,  740,  640,  740,
      971,  971,  741,  971,  742,  743,  744,  744,  744,  744,
      531,  397,  531,  971,  971,  532,  851,  852,  534,  853,
      853,  853,  853,  531,  397,  531,  971,  971,  532,  971,
      533,  747,  748,  748,  748,  748,  640,  640,  640,  971,
      971,  641,  971,  971,  750,  751,  751,  751,  751,  753,
      644,  753,  971,  971,  754,  971,  755,  756,  757,  757,
      757,  757,  753,  644,  753,  971,  971,  754,  971,  755,
      756,  757,  757,  757,  757,  310,  200,  310,  971,  971,
      311,  857,  858,  313,  859,  859,  859,  859,  310,  200,

      310,  971,  971,  311,  971,  312,  760,  761,  761,  761,
      761,  767,  651,  767,  971,  971,  768,  971,  769,  770,
      771,  771,  771,  771,  644,  644,  644,  971,  971,  654,
      971,  971,  764,  765,  765,  765,  765,  767,  651,  767,
      971,  971,  768,  971,  769,  770,  771,  771,  771,  771,
      545,  401,  545,  971,  971,  546,  865,  866,  548,  867,
      867,  867,  867,  545,  401,  545,  971,  971,  546,  971,
      547,  775,  776,  776,  776,  776,  557,  410,  557,  971,
      971,  558,  871,  872,  560,  873,  873,  873,  873,  330,
      214,  330,  971,  971,  331,  874,  875,  333,  876,  876,

      876,  876,  571,  414,  571,  971,  971,  572,  879,  880,
      574,  881,  881,  881,  881,  429,  349,  429,  971,  971,
      430,  971,  431,  432,  790,  790,  790,  790,  245,  153,
      245,  971,  971,  246,  971,  247,  248,  793,  793,  793,
      793,  349,  349,  349,  971,  971,  350,  971,  971,  971,
      795,  795,  795,  795,  443,  353,  443,  971,  971,  444,
      971,  445,  446,  798,  798,  798,  798,  443,  353,  443,
      971,  971,  444,  971,  445,  446,  798,  798,  798,  798,
      594,  594,  594,  971,  971,  595,  971,  971,  971,  800,
      800,  800,  800,  688,  594,  688,  971,  971,  689,  971,

      690,  691,  802,  802,  802,  802,  971,  935,  936,  886,
      937,  937,  937,  937,  938,  938,  971,  939,  939,  939,
      939,  907,  907,  907,  907,  971,  971,  886,  457,  362,
      457,  971,  971,  458,  971,  459,  460,  805,  805,  805,
      805,  457,  362,  457,  971,  971,  458,  971,  459,  460,
      805,  805,  805,  805,  597,  598,  597,  971,  971,  599,
      971,  971,  971,  806,  806,  806,  806,  971,  943,  944,
      887,  945,  945,  945,  945,  946,  946,  971,  947,  947,
      947,  947,  907,  907,  907,  907,  971,  971,  887,  594,
      594,  594,  971,  971,  595,  971,  971,  971,  807,  807,

      807,  807,  971,  951,  952,  888,  953,  953,  953,  953,
      597,  598,  597,  971,  971,  599,  915,  915,  915,  915,
      971,  971,  971,  888,  701,  598,  701,  971,  971,  702,
      971,  703,  704,  808,  808,  808,  808,  604,  605,  604,
      889,  971,  606,  923,  923,  923,  923,  610,  605,  610,
      971,  971,  611,  931,  931,  931,  931,  971,  889,  267,
      167,  267,  971,  971,  268,  971,  269,  270,  811,  811,
      811,  811,  267,  167,  267,  971,  971,  268,  971,  269,
      270,  811,  811,  811,  811,  604,  605,  604,  971,  971,
      606,  971,  971,  971,  812,  812,  812,  812,  971,  971,

      971,  890,  931,  931,  931,  931,  937,  937,  937,  937,
      937,  937,  937,  937,  939,  939,  939,  939,  971,  890,
      598,  598,  598,  971,  971,  608,  971,  971,  971,  813,
      813,  813,  813,  971,  971,  971,  891,  939,  939,  939,
      939,  971,  971,  937,  937,  937,  937,  132,  127,  132,
      530,  971,  133,  971,  891,  715,  605,  715,  971,  961,
      716,  971,  717,  718,  814,  814,  814,  814,  530,  971,
      971,  892,  945,  945,  945,  945,  945,  945,  945,  945,
      971,  945,  945,  945,  945,  971,  971,  971,  309,  892,
      598,  598,  598,  971,  971,  608,  971,  971,  971,  816,

      816,  816,  816,  471,  366,  471,  309,  971,  472,  971,
      473,  474,  819,  819,  819,  819,  471,  366,  471,  971,
      971,  472,  971,  473,  474,  819,  819,  819,  819,  610,
      605,  610,  971,  971,  611,  971,  971,  971,  820,  820,
      820,  820,  971,  971,  971,  893,  947,  947,  947,  947,
      947,  947,  947,  947,  953,  953,  953,  953,  953,  953,
      953,  953,  971,  893,  483,  377,  483,  971,  971,  484,
      971,  485,  486,  825,  825,  825,  825,  483,  377,  483,
      971,  971,  484,  971,  485,  486,  825,  825,  825,  825,
      288,  184,  288,  971,  971,  289,  971,  290,  291,  828,

      828,  828,  828,  288,  184,  288,  971,  971,  289,  971,
      290,  291,  828,  828,  828,  828,  377,  377,  377,  971,
      971,  378,  971,  971,  971,  830,  830,  830,  830,  497,
      381,  497,  971,  971,  498,  971,  499,  500,  833,  833,
      833,  833,  497,  381,  497,  971,  971,  498,  971,  499,
      500,  833,  833,  833,  833,  507,  386,  507,  971,  971,
      508,  971,  509,  510,  838,  838,  838,  838,  507,  386,
      507,  971,  971,  508,  971,  509,  510,  838,  838,  838,
      838,  298,  189,  298,  971,  971,  299,  971,  300,  301,
      841,  841,  841,  841,  298,  189,  298,  971,  971,  299,

      971,  300,  301,  841,  841,  841,  841,  386,  386,  386,
      971,  971,  387,  971,  971,  971,  843,  843,  843,  843,
      521,  390,  521,  971,  971,  522,  971,  523,  524,  846,
      846,  846,  846,  521,  390,  521,  971,  971,  522,  971,
      523,  524,  846,  846,  846,  846,  640,  640,  640,  971,
      971,  641,  971,  971,  971,  848,  848,  848,  848,  740,
      640,  740,  971,  971,  741,  971,  742,  743,  850,  850,
      850,  850,  971,  971,  971,  895,  132,  127,  132,  971,
      971,  133,  971,  971,  971,  953,  953,  953,  953,  971,
      971,  971,  544,  895,  531,  397,  531,  971,  971,  532,

      971,  533,  534,  853,  853,  853,  853,  531,  397,  531,
      544,  960,  532,  971,  533,  534,  853,  853,  853,  853,
      643,  644,  643,  971,  971,  645,  971,  971,  971,  854,
      854,  854,  854,  132,  127,  132,  896,  971,  133,  132,
      127,  132,  971,  971,  133,  963,  964,  963,  971,  971,
      965,  971,  971,  971,  896,  640,  640,  640,  971,  971,
      641,  971,  971,  971,  855,  855,  855,  855,  963,  964,
      963,  897,  971,  965,  971,  971,  957,  963,  964,  963,
      971,  959,  965,  966,  971,  966,  971,  971,  967,  897,
      753,  644,  753,  971,  971,  754,  971,  755,  756,  856,

      856,  856,  856,  963,  964,  963,  898,  966,  965,  966,
      971,  969,  967,  969,  971,  969,  970,  969,  971,  971,
      970,  971,  971,  971,  898,  310,  200,  310,  971,  971,
      311,  971,  312,  313,  859,  859,  859,  859,  310,  200,
      310,  971,  971,  311,  971,  312,  313,  859,  859,  859,
      859,  650,  651,  650,  971,  971,  652,  971,  971,  971,
      860,  860,  860,  860,  969,  971,  969,  899,  969,  970,
      969,  971,  971,  970,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  899,  644,  644,  644,  971,
      971,  654,  971,  971,  971,  861,  861,  861,  861,  971,

      971,  971,  900,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      900,  767,  651,  767,  971,  971,  768,  971,  769,  770,
      862,  862,  862,  862,  971,  971,  971,  901,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  901,  644,  644,  644,  971,
      971,  654,  971,  971,  971,  864,  864,  864,  864,  545,
      401,  545,  971,  971,  546,  971,  547,  548,  867,  867,
      867,  867,  545,  401,  545,  971,  971,  546,  971,  547,
      548,  867,  867,  867,  867,  656,  651,  656,  971,  971,

      657,  971,  971,  971,  868,  868,  868,  868,  971,  971,
      971,  902,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  902,
      557,  410,  557,  971,  971,  558,  971,  559,  560,  873,
      873,  873,  873,  557,  410,  557,  971,  971,  558,  971,
      559,  560,  873,  873,  873,  873,  330,  214,  330,  971,
      971,  331,  971,  332,  333,  876,  876,  876,  876,  330,
      214,  330,  971,  971,  331,  971,  332,  333,  876,  876,
      876,  876,  410,  410,  410,  971,  971,  411,  971,  971,
      971,  878,  878,  878,  878,  571,  414,  571,  971,  971,

      572,  971,  573,  574,  881,  881,  881,  881,  571,  414,
      571,  971,  971,  572,  971,  573,  574,  881,  881,  881,
      881,  688,  594,  688,  971,  971,  689,  908,  909,  691,
      910,  910,  910,  910,  457,  362,  457,  971,  971,  458,
      911,  912,  460,  913,  913,  913,  913,  701,  598,  701,
      971,  971,  702,  916,  917,  704,  918,  918,  918,  918,
      267,  167,  267,  971,  971,  268,  919,  920,  270,  921,
      921,  921,  921,  715,  605,  715,  971,  971,  716,  924,
      925,  718,  926,  926,  926,  926,  471,  366,  471,  971,
      971,  472,  927,  928,  474,  929,  929,  929,  929,  740,

      640,  740,  971,  971,  741,  932,  933,  743,  934,  934,
      934,  934,  753,  644,  753,  971,  971,  754,  940,  941,
      756,  942,  942,  942,  942,  767,  651,  767,  971,  971,
      768,  948,  949,  770,  950,  950,  950,  950,  688,  594,
      688,  971,  971,  689,  971,  690,  691,  910,  910,  910,
      910,  457,  362,  457,  971,  971,  458,  971,  459,  460,
      913,  913,  913,  913,  594,  594,  594,  971,  971,  595,
      971,  971,  971,  915,  915,  915,  915,  701,  598,  701,
      971,  971,  702,  971,  703,  704,  918,  918,  918,  918,
      267,  167,  267,  971,  971,  268,  971,  269,  270,  921,

      921,  921,  921,  598,  598,  598,  971,  971,  608,  971,
      971,  971,  923,  923,  923,  923,  715,  605,  715,  971,
      971,  716,  971,  717,  718,  926,  926,  926,  926,  471,
      366,  471,  971,  971,  472,  971,  473,  474,  929,  929,
      929,  929,   46,   46,   46,   46,   46,   46,   46,   46,
       80,   80,   80,   80,   80,   80,   80,   80,  108,  108,
      108,  108,  108,  108,  108,  108,  117,  117,  117,  117,
      117,  117,  117,  117,  131,  131,  131,  131,  131,  131,
      131,  131,  135,  971,  971,  135,  169,  971,  971,  169,
      971,  169,  169,  169,  170,  170,  170,  170,  170,  170,

      170,  170,  202,  971,  971,  202,  971,  202,  202,  203,
      203,  203,  203,  203,  203,  203,  203,  216,  216,  971,
      216,  971,  216,  216,  216,  219,  219,  219,  219,  219,
      219,  219,  219,  225,  225,  971,  225,  225,  225,  225,
      225,  244,  244,  244,  244,  244,  244,  244,  244,  254,
      254,  254,  254,  254,  254,  254,  254,  260,  260,  971,
      971,  260,  260,  266,  266,  266,  266,  266,  266,  266,
      266,  277,  277,  277,  277,  277,  277,  277,  277,  287,
      287,  287,  287,  287,  287,  287,  287,  297,  297,  297,
      297,  297,  297,  297,  297,  309,  309,  309,  309,  309,

      309,  309,  309,  319,  319,  319,  319,  319,  319,  319,
      319,  329,  329,  329,  329,  329,  329,  329,  329,  216,
      216,  971,  216,  971,  216,  216,  216,  219,  219,  219,
      219,  219,  219,  219,  219,  225,  225,  971,  225,  225,
      225,  225,  225,  131,  131,  131,  131,  131,  131,  131,
      131,  135,  971,  971,  135,  244,  244,  244,  244,  244,
      244,  244,  244,  254,  254,  254,  254,  254,  254,  254,
      254,  260,  260,  971,  971,  260,  260,  266,  266,  266,
      266,  266,  266,  266,  266,  428,  428,  428,  428,  428,
      428,  428,  428,  442,  442,  442,  442,  442,  442,  442,

      442,  456,  456,  456,  456,  456,  456,  456,  456,  470,
      470,  470,  470,  470,  470,  470,  470,  482,  482,  482,
      482,  482,  482,  482,  482,  496,  496,  496,  496,  496,
      496,  496,  496,  506,  506,  506,  506,  506,  506,  506,
      506,  297,  297,  297,  297,  297,  297,  297,  297,  520,
      520,  520,  520,  520,  520,  520,  520,  530,  530,  530,
      530,  530,  530,  530,  530,  309,  309,  309,  309,  309,
      309,  309,  309,  544,  544,  544,  544,  544,  544,  544,
      544,  319,  319,  319,  319,  319,  319,  319,  319,  556,
      556,  556,  556,  556,  556,  556,  556,  329,  329,  329,

      329,  329,  329,  329,  329,  570,  570,  570,  570,  570,
      570,  570,  570,  131,  131,  131,  131,  131,  131,  131,
      131,  135,  971,  971,  135,  428,  428,  428,  428,  428,
      428,  428,  428,  244,  244,  244,  244,  244,  244,  244,
      244,  442,  442,  442,  442,  442,  442,  442,  442,  456,
      456,  456,  456,  456,  456,  456,  456,  266,  266,  266,
      266,  266,  266,  266,  266,  470,  470,  470,  470,  470,
      470,  470,  470,  277,  277,  277,  277,  277,  277,  277,
      277,  482,  482,  482,  482,  482,  482,  482,  482,  287,
      287,  287,  287,  287,  287,  287,  287,  496,  496,  496,

      496,  496,  496,  496,  496,  506,  506,  506,  506,  506,
      506,  506,  506,  297,  297,  297,  297,  297,  297,  297,
      297,  520,  520,  520,  520,  520,  520,  520,  520,  530,
      530,  530,  530,  530,  530,  530,  530,  309,  309,  309,
      309,  309,  309,  309,  309,  544,  544,  544,  544,  544,
      544,  544,  544,  319,  319,  319,  319,  319,  319,  319,
      319,  556,  556,  556,  556,  556,  556,  556,  556,  329,
      329,  329,  329,  329,  329,  329,  329,  570,  570,  570,
      570,  570,  570,  570,  570,  131,  131,  131,  131,  131,
      131,  131,  131,  135,  971,  971,  135,  428,  428,  428,

      428,  428,  428,  428,  428,  244,  244,  244,  244,  244,
      244,  244,  244,  442,  442,  442,  442,  442,  442,  442,
      442,  687,  687,  687,  687,  687,  687,  687,  687,  456,
      456,  456,  456,  456,  456,  456,  456,  700,  700,  700,
      700,  700,  700,  700,  700,  266,  266,  266,  266,  266,
      266,  266,  266,  714,  714,  714,  714,  714,  714,  714,
      714,  470,  470,  470,  470,  470,  470,  470,  470,  277,
      277,  277,  277,  277,  277,  277,  277,  482,  482,  482,
      482,  482,  482,  482,  482,  287,  287,  287,  287,  287,
      287,  287,  287,  496,  496,  496,  496,  496,  496,  496,

      496,  506,  506,  506,  506,  506,  506,  506,  506,  297,
      297,  297,  297,  297,  297,  297,  297,  520,  520,  520,
      520,  520,  520,  520,  520,  739,  739,  739,  739,  739,
      739,  739,  739,  530,  530,  530,  530,  530,  530,  530,
      530,  752,  752,  752,  752,  752,  752,  752,  752,  309,
      309,  309,  309,  309,  309,  309,  309,  766,  766,  766,
      766,  766,  766,  766,  766,  544,  544,  544,  544,  544,
      544,  544,  544,  319,  319,  319,  319,  319,  319,  319,
      319,  556,  556,  556,  556,  556,  556,  556,  556,  329,
      329,  329,  329,  329,  329,  329,  329,  570,  570,  570,

      570,  570,  570,  570,  570,  131,  131,  131,  131,  131,
      131,  131,  131,  135,  971,  971,  135,  428,  428,  428,
      428,  428,  428,  428,  428,  244,  244,  244,  244,  244,
      244,  244,  244,  442,  442,  442,  442,  442,  442,  442,
      442,  687,  687,  687,  687,  687,  687,  687,  687,  456,
      456,  456,  456,  456,  456,  456,  456,  700,  700,  700,
      700,  700,  700,  700,  700,  266,  266,  266,  266,  266,
      266,  266,  266,  714,  714,  714,  714,  714,  714,  714,
      714,  470,  470,  470,  470,  470,  470,  470,  470,  482,
      482,  482,  482,  482,  482,  482,  482,  287,  287,  287,

      287,  287,  287,  287,  287,  496,  496,  496,  496,  496,
      496,  496,  496,  506,  506,  506,  506,  506,  506,  506,
      506,  297,  297,  297,  297,  297,  297,  297,  297,  520,
      520,  520,  520,  520,  520,  520,  520,  739,  739,  739,
      739,  739,  739,  739,  739,  530,  530,  530,  530,  530,
      530,  530,  530,  752,  752,  752,  752,  752,  752,  752,
      752,  309,  309,  309,  309,  309,  309,  309,  309,  766,
      766,  766,  766,  766,  766,  766,  766,  544,  544,  544,
      544,  544,  544,  544,  544,  556,  556,  556,  556,  556,
      556,  556,  556,  329,  329,  329,  329,  329,  329,  329,

      329,  442,  442,  442,  442,  442,  442,  442,  442,  687,
      687,  687,  687,  687,  687,  687,  687,  456,  456,  456,
      456,  456,  456,  456,  456,  700,  700,  700,  700,  700,
      700,  700,  700,  266,  266,  266,  266,  266,  266,  266,
      266,  714,  714,  714,  714,  714,  714,  714,  714,  470,
      470,  470,  470,  470,  470,  470,  470,  482,  482,  482,
      482,  482,  482,  482,  482,  287,  287,  287,  287,  287,
      287,  287,  287,  496,  496,  496,  496,  496,  496,  496,
      496,  506,  506,  506,  506,  506,  506,  506,  506,  297,
      297,  297,  297,  297,  297,  297,  297,  520,  520,  520,

      520,  520,  520,  520,  520,  739,  739,  739,  739,  739,
      739,  739,  739,  530,  530,  530,  530,  530,  530,  530,
      530,  752,  752,  752,  752,  752,  752,  752,  752,  309,
      309,  309,  309,  309,  309,  309,  309,  766,  766,  766,
      766,  766,  766,  766,  766,  544,  544,  544,  544,  544,
      544,  544,  544,  556,  556,  556,  556,  556,  556,  556,
      556,  329,  329,  329,  329,  329,  329,  329,  329,  570,
      570,  570,  570,  570,  570,  570,  570,  131,  131,  131,
      131,  131,  131,  131,  131,  135,  971,  971,  135,  687,
      687,  687,  687,  687,  687,  687,  687,  456,  456,  456,

      456,  456,  456,  456,  456,  700,  700,  700,  700,  700,
      700,  700,  700,  266,  266,  266,  266,  266,  266,  266,
      266,  714,  714,  714,  714,  714,  714,  714,  714,  470,
      470,  470,  470,  470,  470,  470,  470,  962,  962,  962,
      962,  962,  962,  962,  962,  968,  968,  971,  968,  968,
      968,  968,  968,   45,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,

      971
    } ;

static const short int yy_chk[8302] =
    {   0,
        0,    1,    1,    1,    0,    0,    1,    2,    2,    2,
      932,  932,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,   60,   60,    5,    6,    6,    6,  420,
     1030,    6, 1010,  420,   47,   47,   47,    5,    5,   47,
       48,   73,   48,    6,    6,   48,    5,   65,   65,   65,
       65,   65,    6,    7,    7,    7, 1006,   73,    7,  999,

        7,    7,    7,    7,    7,    7,   66,   66,   66,   66,
      993,    7,    9,    9,    9,    9,    9,    9,   10,   10,
       10,   10,   10,   10,   11,   11,   11,   11,   11,   11,
       12,   12,   12,   12,   12,   12,   13,   13,   13,   13,
       13,   13,   14,   14,   14,   14,   14,   14,   15,   15,
       15,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       17,   17,   17,  988,   17,   17,   18,   18,   18,  956,
       18,   18,   19,   19,   19,   19,   19,   19,   17,   68,
       68,   68,   68,   68,   18,   20,   20,   20,   20,   20,
       20,   21,   21,   21,   21,   21,   21,   22,   22,   22,

       22,   22,   22,   23,   23,   23,   23,   23,   23,   24,
       24,   24,   24,   24,   24,   25,   25,   25,   25,   25,
       25,  259,  905,   39,   39,   39,   25,   39,   39,   40,
       40,   40,  904,   40,   40,  450,  884,  259,   25,  451,
       25,   26,   26,   26,   26,   26,   26,  883,   51,   51,
       51,  450,   26,   51,   39,  451,  785,   41,   41,   41,
       40,   41,   41,  783,   26,  677,   26,   27,   27,   27,
       27,   27,   27,  933,  933,   42,   42,   42,   27,   42,
       42,   49,   49,   49,  934,  934,   49,  676,   41,  674,
       27,  580,   27,   28,   28,   28,   28,   28,   28,   69,

       69,   69,   69,  127,   28,  127,   42,  579,  127,   49,
       70,   70,   70,   70,   70,  578,   28,  577,   28,   29,
       29,   29,   29,   29,   29,   71,   71,   71,   71,  421,
       29,  417,   43,   43,   43,   43,   43,   43,   74,   74,
       74,   74,   29,   43,   29,   30,   30,   30,   30,   30,
       30,   76,   76,   76,   76,  344,   30,  343,   44,   44,
       44,   44,   44,   44,   78,   78,   78,   78,   30,   44,
       30,   31,   31,   31,   31,   31,   31,   77,   77,   77,
       77,   77,   31,   75,   75,   75,   75,   82,   82,   82,
      342,   82,   82,  341,   31,  340,   31,   32,   32,   32,

       32,   32,   32,   75,   85,   85,   85,   85,   32,   84,
       84,   84,   84,   84,   86,   86,   86,   86,   86,   75,
       32,  339,   32,   33,   33,   33,  337,   33,   33,   87,
       87,   87,   87,   87,   88,   88,   88,   88,  940,  940,
      239,   33,   90,   90,   90,   90,   90,   91,   91,   91,
       91,  941,  941,   33,  238,   33,   34,   34,   34,  237,
       34,   34,   93,   93,   93,   93,   93,   94,   94,   94,
       94,  942,  942,  236,   34,   99,   99,   99,   99,   99,
      100,  100,  100,  100,  948,  948,   34,  235,   34,   35,
       35,   35,   35,   35,   35,  101,  101,  101,  101,  101,

       35,  102,  102,  102,  102,  104,  104,  104,  104,  949,
      949,  233,   35,  232,   35,   36,   36,   36,   36,   36,
       36,  105,  105,  105,  105,  105,   36,  103,  103,  103,
      103,  106,  106,  106,  106,  950,  950,  231,   36,  230,
       36,   37,   37,   37,   37,   37,   37,  103,  149,  109,
      109,  109,   37,  109,  109,  111,  111,  111,  111,  111,
      118,  118,  118,  103,   37,  118,   37,   38,   38,   38,
       38,   38,   38,  112,  112,  112,  112,  147,   38,  109,
      146,  109,  114,  114,  114,  114,  114,  145,  144,  143,
       38,  141,   38,   67,   67,   67,  140,  139,   67,  137,

      136,   67,   67,   67,   67,   67,   72,   72,   72,  121,
      110,   72,   96,   83,   64,   72,   72,   72,   72,  115,
      115,  115,  115,  120,  120,  120,   63,  120,  120,  123,
      123,  123,  123,   62,   61,   72,  124,  124,  124,  124,
      125,  125,  125,  125,  126,  126,  126,   59,   58,  126,
       57,   72,   79,   79,   79,   56,  124,   79,   55,   54,
       79,   79,   79,   79,   79,   89,   89,   89,   53,   52,
       89,   45,  124,   89,   89,   89,   89,   89,   92,   92,
       92,    0,    0,   92,    0,    0,   92,   92,   92,   92,
       92,   95,   95,   95,    0,    0,   95,    0,    0,   95,

       95,   95,   95,   95,  107,  107,  107,    0,    0,  107,
        0,    0,  107,  107,  107,  107,  107,  113,  113,  113,
        0,    0,  113,    0,    0,  113,  113,  113,  113,  113,
      116,  116,  116,    0,    0,  116,    0,    0,  116,  116,
      116,  116,  116,  128,  128,  128,    0,  129,  128,  129,
        0,  130,  129,  130,    0,    0,  130,  131,  131,  131,
        0,    0,  131,  132,  132,  132,    0,    0,  132,  133,
      133,  133,    0,    0,  133,  134,  134,  134,    0,    0,
      134,  150,  150,  150,  150,  155,  155,  155,  155,  156,
      156,  156,  156,  156,  162,  162,  162,  162,    0,  134,

      152,  152,  152,    0,    0,  152,    0,    0,    0,  152,
      152,  152,  152,  161,  161,  161,  152,    0,  161,  164,
      164,  164,  164,    0,    0,    0,  157,  157,  157,  157,
        0,    0,    0,  157,  152,  153,  153,  153,    0,    0,
      153,    0,  153,  153,  153,  153,  153,  153,  154,  154,
      154,  157,    0,  154,    0,  154,  154,  154,  154,  154,
      154,  159,  159,  159,    0,    0,  159,    0,  159,    0,
      159,  159,  159,  159,  160,  160,  160,    0,    0,  160,
        0,  160,    0,  160,  160,  160,  160,  166,  166,  166,
        0,    0,  166,    0,    0,    0,  166,  166,  166,  166,

      170,  170,  170,  166,  170,  170,  171,  171,  171,    0,
      171,  171,  173,  173,  173,  173,  174,  174,  174,  174,
      174,  166,  167,  167,  167,    0,    0,  167,    0,  167,
      167,  167,  167,  167,  167,  168,  168,  168,    0,    0,
      168,    0,  168,  168,  168,  168,  168,  168,  175,  175,
      175,  175,    0,    0,    0,  175,  176,  176,  176,  176,
      181,  181,  181,  181,  186,  186,  186,  186,  192,  192,
      192,  192,    0,  175,  178,  178,  178,    0,    0,  178,
        0,    0,    0,  178,  178,  178,  178,    0,    0,    0,
      178,  193,  193,  193,  193,  193,  195,  195,  195,  195,

      194,  194,  194,  194,    0,    0,    0,  194,  178,  179,
      179,  179,    0,    0,  179,    0,  179,  179,  179,  179,
      179,  179,  180,  180,  180,  194,    0,  180,    0,  180,
      180,  180,  180,  180,  180,  183,  183,  183,    0,    0,
      183,    0,    0,    0,  183,  183,  183,  183,    0,    0,
        0,  183,  197,  197,  197,  197,    0,  203,  203,  203,
        0,  203,  203,  206,  206,  206,  206,    0,    0,  183,
      184,  184,  184,    0,    0,  184,    0,  184,  184,  184,
      184,  184,  184,  185,  185,  185,    0,  203,  185,  203,
      185,  185,  185,  185,  185,  185,  188,  188,  188,    0,

        0,  188,    0,    0,    0,  188,  188,  188,  188,    0,
        0,    0,  188,  211,  211,  211,  211,    0,  204,  204,
      204,    0,  204,  204,  217,  217,  217,    0,    0,  217,
      188,  189,  189,  189,    0,    0,  189,    0,  189,  189,
      189,  189,  189,  189,  190,  190,  190,    0,  204,  190,
      204,  190,  190,  190,  190,  190,  190,  199,  199,  199,
        0,    0,  199,    0,    0,    0,  199,  199,  199,  199,
      218,  218,  218,  199,  218,  218,  219,  219,  219,    0,
      219,  219,  220,  220,  220,    0,  220,  220,    0,    0,
        0,  199,  200,  200,  200,    0,    0,  200,    0,  200,

      200,  200,  200,  200,  200,  201,  201,  201,    0,    0,
      201,    0,  201,  201,  201,  201,  201,  201,  208,  208,
      208,    0,    0,  208,    0,    0,    0,  208,  208,  208,
      208,  221,  221,  221,  208,  221,  221,  223,  223,  223,
      223,  225,  226,  225,  226,    0,  225,  226,  242,  242,
      242,  242,  208,  209,  209,  209,    0,    0,  209,    0,
      209,  209,  209,  209,  209,  209,  210,  210,  210,    0,
        0,  210,    0,  210,  210,  210,  210,  210,  210,  212,
      212,  212,    0,    0,  212,    0,    0,  212,  212,  212,
      212,  212,  213,  213,  213,    0,    0,  213,    0,    0,

        0,  213,  213,  213,  213,  227,    0,  227,  213,    0,
      227,  228,  228,  228,  240,  240,  228,  240,  240,  240,
      240,  241,  241,  241,  241,  241,  213,  214,  214,  214,
        0,  228,  214,    0,  214,  214,  214,  214,  214,  214,
      215,  215,  215,    0,    0,  215,    0,  215,  215,  215,
      215,  215,  215,  243,  243,  243,    0,    0,  243,    0,
        0,  243,  243,  243,  243,  243,  244,  244,  244,    0,
        0,  244,    0,  244,  244,  244,  244,  244,  244,  245,
      245,  245,    0,    0,  245,    0,  245,  245,  245,  245,
      245,  245,  248,  248,  248,  248,  249,  249,  249,  250,

      250,  249,  250,  250,  250,  250,  251,  251,  251,  251,
      252,  252,  252,  252,  253,  253,  253,  253,  260,  260,
      260,  262,  262,  260,  262,  262,  262,  262,    0,    0,
      252,  263,  263,  263,  263,  263,  264,  264,  264,  264,
      270,  270,  270,  270,    0,    0,  252,  254,  254,  254,
        0,    0,  254,    0,  254,    0,  254,  254,  254,  254,
      255,  255,  255,    0,    0,  255,    0,  255,    0,  255,
      255,  255,  255,  256,  256,  256,    0,    0,  256,    0,
      256,    0,  256,  256,  256,  256,  257,  257,  257,    0,
        0,  257,    0,  257,    0,  257,  257,  257,  257,  258,

      258,  258,    0,    0,  258,    0,  258,    0,  258,  258,
      258,  258,  271,  271,  271,  272,  272,  271,  272,  272,
      272,  272,  275,  275,  275,  275,  273,  273,  258,  273,
      273,  273,  273,  274,  274,  274,  274,  274,  276,  276,
      276,  276,  276,    0,  258,  265,  265,  265,    0,    0,
      265,    0,    0,  265,  265,  265,  265,  265,  266,  266,
      266,    0,    0,  266,    0,  266,  266,  266,  266,  266,
      266,  267,  267,  267,    0,    0,  267,    0,  267,  267,
      267,  267,  267,  267,  277,  277,  277,    0,    0,  277,
        0,  277,  277,  277,  277,  277,  277,  281,  281,  281,

      281,  283,  283,    0,  283,  283,  283,  283,  284,  284,
      284,  284,  284,  285,  285,  285,  285,  286,  286,  286,
        0,    0,  286,    0,    0,  286,  286,  286,  286,  286,
      287,  287,  287,    0,    0,  287,    0,  287,  287,  287,
      287,  287,  287,  291,  291,  291,  291,  292,  292,  292,
      293,  293,  292,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  295,  295,  295,  295,  296,  296,  296,    0,
        0,  296,    0,    0,  296,  296,  296,  296,  296,  297,
      297,  297,    0,    0,  297,    0,  297,  297,  297,  297,
      297,  297,  301,  301,  301,  301,  302,  302,  302,  303,

      303,  302,  303,  303,  303,  303,  305,  305,    0,  305,
      305,  305,  305,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  308,  308,  308,    0,    0,  308,    0,    0,
      308,  308,  308,  308,  308,  309,  309,  309,    0,    0,
      309,    0,  309,  309,  309,  309,  309,  309,  313,  313,
      313,  313,  314,  314,  314,  315,  315,  314,  315,  315,
      315,  315,  316,  316,  316,  316,  316,  317,  317,  317,
      317,  318,  318,  318,  318,  318,  319,  319,  319,    0,
        0,  319,    0,  319,  319,  319,  319,  319,  319,  323,
      323,  323,  323,  325,  325,    0,  325,  325,  325,  325,

      326,  326,  326,  326,  326,  327,  327,  327,  327,  328,
      328,  328,    0,    0,  328,    0,    0,  328,  328,  328,
      328,  328,  329,  329,  329,    0,    0,  329,    0,  329,
      329,  329,  329,  329,  329,  333,  333,  333,  333,  334,
      334,  334,    0,    0,  334,  336,  336,  336,    0,    0,
      336,  346,  346,  346,  346,  355,  355,  355,  355,  356,
      356,  356,  356,    0,  336,  347,  347,  347,    0,    0,
      347,    0,    0,    0,  347,  347,  347,  347,  348,  348,
      348,    0,    0,  348,    0,    0,    0,  348,  348,  348,
      348,    0,    0,    0,  348,  359,  359,  359,  359,  368,

      368,  368,  368,  369,  369,  369,  369,  370,  370,  370,
      370,    0,  348,  349,  349,  349,    0,    0,  349,    0,
      349,  349,  349,  349,  349,  349,  350,  350,  350,    0,
        0,  350,    0,  350,  350,  350,  350,  350,  350,  351,
      351,  351,    0,    0,  351,    0,    0,    0,  351,  351,
      351,  351,    0,    0,    0,  351,  372,  372,  372,  372,
        0,    0,    0,  372,  373,  373,  373,  373,    0,    0,
        0,  373,    0,  351,  352,  352,  352,  352,  352,  352,
        0,  372,    0,  352,  374,  374,  374,  374,    0,  373,
      383,  383,  383,  383,  392,  392,  392,  392,    0,    0,

        0,  352,  353,  353,  353,    0,    0,  353,    0,  353,
      353,  353,  353,  353,  353,  354,  354,  354,    0,    0,
      354,    0,  354,  354,  354,  354,  354,  354,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  393,  393,  393,
      393,  394,  394,  394,  394,  416,  416,  416,  358,    0,
      416,    0,  358,  358,  358,  403,  403,  403,  403,  407,
      407,  407,  407,    0,  358,  360,  360,  360,    0,    0,
      360,    0,    0,    0,  360,  360,  360,  360,  361,  361,
      361,    0,    0,  361,    0,    0,    0,  361,  361,  361,
      361,    0,  424,  424,  361,  424,  424,  424,  424,  425,

      425,  425,  425,  425,  405,  405,  405,  405,    0,    0,
        0,  405,  361,  362,  362,  362,    0,    0,  362,    0,
      362,  362,  362,  362,  362,  362,  363,  363,  363,  405,
        0,  363,    0,  363,  363,  363,  363,  363,  363,  364,
      364,  364,    0,    0,  364,    0,    0,    0,  364,  364,
      364,  364,    0,    0,    0,  364,  426,  426,  426,  426,
      427,  427,  427,  427,  427,  432,  432,  432,  432,  440,
      440,  440,  440,  364,  365,  365,  365,  365,  365,  365,
        0,    0,    0,  365,  436,  436,  436,  436,  436,  437,
      437,  437,    0,    0,  437,  439,  439,  439,  439,  439,

        0,  365,  366,  366,  366,    0,    0,  366,    0,  366,
      366,  366,  366,  366,  366,  367,  367,  367,    0,    0,
      367,    0,  367,  367,  367,  367,  367,  367,  371,  371,
      371,    0,    0,  371,    0,    0,    0,  371,  371,  371,
      371,  375,  375,  375,    0,    0,  375,    0,    0,    0,
      375,  375,  375,  375,  376,  376,  376,    0,    0,  376,
        0,    0,    0,  376,  376,  376,  376,    0,    0,    0,
      376,  446,  446,  446,  446,  452,  452,    0,  452,  452,
      452,  452,  453,  453,  453,  453,  453,    0,  376,  377,
      377,  377,    0,    0,  377,    0,  377,  377,  377,  377,

      377,  377,  378,  378,  378,    0,    0,  378,    0,  378,
      378,  378,  378,  378,  378,  379,  379,  379,    0,    0,
      379,    0,    0,    0,  379,  379,  379,  379,    0,    0,
        0,  379,  454,  454,  454,  454,  460,  460,  460,  460,
      461,  461,  461,    0,    0,  461,    0,    0,    0,  379,
      380,  380,  380,  380,  380,  380,    0,    0,    0,  380,
      464,  464,  464,  464,  464,  465,  465,  465,    0,    0,
      465,  467,  467,  467,  467,  467,    0,  380,  381,  381,
      381,    0,    0,  381,    0,  381,  381,  381,  381,  381,
      381,  382,  382,  382,    0,    0,  382,    0,  382,  382,

      382,  382,  382,  382,  384,  384,  384,    0,    0,  384,
        0,    0,    0,  384,  384,  384,  384,  385,  385,  385,
        0,    0,  385,    0,    0,    0,  385,  385,  385,  385,
        0,    0,    0,  385,  468,  468,  468,  468,  474,  474,
      474,  474,  475,  475,  475,    0,    0,  475,    0,    0,
        0,  385,  386,  386,  386,    0,    0,  386,    0,  386,
      386,  386,  386,  386,  386,  387,  387,  387,    0,    0,
      387,    0,  387,  387,  387,  387,  387,  387,  388,  388,
      388,    0,    0,  388,    0,  388,  388,  388,  388,  388,
      388,    0,  476,  476,  388,  476,  476,  476,  476,  478,

      478,    0,  478,  478,  478,  478,  479,  479,  479,  479,
      479,    0,  388,  389,  389,  389,    0,    0,  389,    0,
      389,  389,  389,  389,  389,  389,  390,  390,  390,    0,
        0,  390,    0,  390,  390,  390,  390,  390,  390,  391,
      391,  391,    0,    0,  391,    0,  391,  391,  391,  391,
      391,  391,  395,  395,  395,    0,    0,  395,    0,    0,
        0,  395,  395,  395,  395,  396,  396,  396,    0,    0,
      396,    0,    0,    0,  396,  396,  396,  396,    0,    0,
        0,  396,  480,  480,  480,  480,  481,  481,  481,  481,
      481,  486,  486,  486,  486,  494,  494,  494,  494,  396,

      397,  397,  397,    0,    0,  397,    0,  397,  397,  397,
      397,  397,  397,  398,  398,  398,    0,    0,  398,    0,
      398,  398,  398,  398,  398,  398,  399,  399,  399,    0,
        0,  399,    0,  399,  399,  399,  399,  399,  399,    0,
        0,    0,  399,  490,  490,  490,  490,  490,  491,  491,
      491,    0,    0,  491,  493,  493,  493,  493,  493,    0,
      399,  400,  400,  400,    0,    0,  400,    0,  400,  400,
      400,  400,  400,  400,  401,  401,  401,    0,    0,  401,
        0,  401,  401,  401,  401,  401,  401,  402,  402,  402,
        0,    0,  402,    0,  402,  402,  402,  402,  402,  402,

      404,  404,  404,    0,    0,  404,    0,    0,    0,  404,
      404,  404,  404,  406,  406,  406,    0,    0,  406,    0,
      406,  406,  406,  406,  406,  406,    0,    0,    0,  406,
      500,  500,  500,  500,  502,  502,    0,  502,  502,  502,
      502,  503,  503,  503,  503,  503,    0,  406,  408,  408,
      408,    0,    0,  408,    0,    0,    0,  408,  408,  408,
      408,  409,  409,  409,    0,    0,  409,    0,    0,    0,
      409,  409,  409,  409,    0,    0,    0,  409,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  510,  510,  510,
      510,  518,  518,  518,  518,  409,  410,  410,  410,    0,

        0,  410,    0,  410,  410,  410,  410,  410,  410,  411,
      411,  411,    0,    0,  411,    0,  411,  411,  411,  411,
      411,  411,  412,  412,  412,    0,    0,  412,    0,  412,
      412,  412,  412,  412,  412,    0,    0,    0,  412,  514,
      514,  514,  514,  514,  515,  515,  515,    0,    0,  515,
      517,  517,  517,  517,  517,    0,  412,  413,  413,  413,
        0,    0,  413,    0,  413,  413,  413,  413,  413,  413,
      414,  414,  414,    0,    0,  414,    0,  414,  414,  414,
      414,  414,  414,  415,  415,  415,    0,    0,  415,    0,
      415,  415,  415,  415,  415,  415,  428,  428,  428,    0,

        0,  428,    0,  428,  428,  428,  428,  428,  428,  429,
      429,  429,    0,    0,  429,    0,  429,  429,  429,  429,
      429,  429,  434,  434,  434,    0,    0,  434,  434,  434,
      434,  434,  434,  434,  434,  435,  435,  435,    0,    0,
      435,    0,  435,  435,  435,  435,  435,  435,  438,  438,
      438,    0,    0,  438,    0,  438,  438,  438,  438,  438,
      438,  441,  441,  441,    0,    0,  441,    0,    0,  441,
      441,  441,  441,  441,  442,  442,  442,    0,    0,  442,
        0,  442,  442,  442,  442,  442,  442,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  455,  455,  455,    0,    0,  455,
        0,    0,  455,  455,  455,  455,  455,  456,  456,  456,
        0,    0,  456,    0,  456,  456,  456,  456,  456,  456,
      457,  457,  457,    0,    0,  457,    0,  457,  457,  457,
      457,  457,  457,  462,  462,  462,    0,    0,  462,  462,
      462,  462,  462,  462,  462,  462,  463,  463,  463,    0,
        0,  463,    0,  463,  463,  463,  463,  463,  463,  466,

      466,  466,    0,    0,  466,    0,  466,  466,  466,  466,
      466,  466,  469,  469,  469,    0,    0,  469,    0,    0,
      469,  469,  469,  469,  469,  470,  470,  470,    0,    0,
      470,    0,  470,  470,  470,  470,  470,  470,  477,  477,
      477,    0,    0,  477,  477,  477,  477,  477,  477,  477,
      477,  482,  482,  482,    0,    0,  482,    0,  482,  482,
      482,  482,  482,  482,  483,  483,  483,    0,    0,  483,
        0,  483,  483,  483,  483,  483,  483,  488,  488,  488,
        0,    0,  488,  488,  488,  488,  488,  488,  488,  488,
      489,  489,  489,    0,    0,  489,    0,  489,  489,  489,

      489,  489,  489,  492,  492,  492,    0,    0,  492,    0,
      492,  492,  492,  492,  492,  492,  495,  495,  495,    0,
        0,  495,    0,    0,  495,  495,  495,  495,  495,  496,
      496,  496,    0,    0,  496,    0,  496,  496,  496,  496,
      496,  496,  506,  506,  506,    0,    0,  506,    0,  506,
      506,  506,  506,  506,  506,  507,  507,  507,    0,    0,
      507,    0,  507,  507,  507,  507,  507,  507,  512,  512,
      512,    0,    0,  512,  512,  512,  512,  512,  512,  512,
      512,  513,  513,  513,    0,    0,  513,    0,  513,  513,
      513,  513,  513,  513,  516,  516,  516,    0,    0,  516,

        0,  516,  516,  516,  516,  516,  516,  519,  519,  519,
        0,    0,  519,    0,    0,  519,  519,  519,  519,  519,
      520,  520,  520,    0,    0,  520,    0,  520,  520,  520,
      520,  520,  520,  524,  524,  524,  524,  526,  526,    0,
      526,  526,  526,  526,  527,  527,  527,  527,  527,  528,
      528,  528,  528,  529,  529,  529,    0,    0,  529,    0,
        0,  529,  529,  529,  529,  529,  530,  530,  530,    0,
        0,  530,    0,  530,  530,  530,  530,  530,  530,  531,
      531,  531,    0,    0,  531,    0,  531,  531,  531,  531,
      531,  531,  534,  534,  534,  534,  535,  535,  535,    0,

        0,  535,  536,  536,  536,    0,    0,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  537,  537,    0,    0,
      537,    0,  537,  537,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  539,  539,  539,    0,    0,  539,  540,
      540,  540,    0,    0,  540,    0,  540,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  542,  542,  542,
      542,  543,  543,  543,    0,    0,  543,    0,    0,  543,
      543,  543,  543,  543,  544,  544,  544,    0,    0,  544,
        0,  544,  544,  544,  544,  544,  544,  548,  548,  548,
      548,  549,  549,  549,  550,  550,  549,  550,  550,  550,

      550,  551,  551,  551,    0,    0,  551,  551,  551,  551,
      551,  551,  551,  551,  552,  552,    0,  552,  552,  552,
      552,  553,  553,  553,  553,  553,  554,  554,  554,  554,
      555,  555,  555,  555,  555,  556,  556,  556,    0,    0,
      556,    0,  556,  556,  556,  556,  556,  556,  557,  557,
      557,    0,    0,  557,    0,  557,  557,  557,  557,  557,
      557,  560,  560,  560,  560,  562,  562,  562,    0,    0,
      562,  562,  562,  562,  562,  562,  562,  562,  563,  563,
      563,    0,    0,  563,    0,  563,  563,  563,  563,  563,
      563,  564,  564,  564,  564,  564,  565,  565,  565,    0,

        0,  565,  566,  566,  566,    0,    0,  566,    0,  566,
      566,  566,  566,  566,  566,  567,  567,  567,  567,  567,
      568,  568,  568,  568,  569,  569,  569,    0,    0,  569,
        0,    0,  569,  569,  569,  569,  569,  570,  570,  570,
        0,    0,  570,    0,  570,  570,  570,  570,  570,  570,
      574,  574,  574,  574,  576,  576,  576,    0,    0,  576,
      581,  581,  581,  581,  583,  583,  583,  583,  587,  587,
      587,  583,    0,  587,  591,  591,  591,  591,  612,  612,
      612,  612,  576,  582,  582,  582,    0,    0,  582,  583,
        0,    0,  582,  582,  582,  582,  584,  584,  584,    0,

        0,  584,    0,  584,  584,  584,  584,  584,  584,  602,
      602,  602,  584,    0,  602,  613,  613,  613,  613,  617,
      617,  617,  617,  623,  623,  623,    0,    0,  623,    0,
      584,  585,  585,  585,    0,    0,  585,    0,  585,  585,
      585,  585,  585,  585,  586,  586,  586,    0,    0,  586,
        0,  586,  586,  586,  586,  586,  586,  588,  588,  588,
        0,    0,  588,    0,    0,    0,  588,  588,  588,  588,
        0,    0,    0,  588,  619,  619,  619,  619,    0,    0,
        0,  619,  627,  627,  627,  627,  637,  637,  637,  637,
        0,  588,  589,  589,  589,    0,    0,  589,    0,  619,

        0,  589,  589,  589,  589,  633,  633,  633,  589,    0,
      633,  658,  658,  658,  658,  629,  629,  629,  629,  648,
      648,  648,  629,    0,  648,    0,  589,  590,  590,  590,
        0,    0,  590,    0,  590,  590,  590,  590,  590,  590,
      629,    0,    0,  590,  659,  659,  659,  659,  663,  663,
      663,  663,    0,  665,  665,  665,  665,    0,    0,    0,
      665,  590,  592,  592,  592,    0,    0,  592,    0,    0,
        0,  592,  592,  592,  592,  593,  593,  593,  665,    0,
      593,    0,    0,    0,  593,  593,  593,  593,  669,  669,
      669,  593,    0,  669,  673,  673,  673,  678,  678,  673,

      678,  678,  678,  678,    0,  673,    0,    0,    0,  593,
      594,  594,  594,    0,    0,  594,    0,  594,  594,  594,
      594,  594,  594,  595,  595,  595,    0,    0,  595,    0,
      595,  595,  595,  595,  595,  595,  596,  596,  596,    0,
        0,  596,    0,  596,  596,  596,  596,  596,  596,    0,
      681,  681,  596,  681,  681,  681,  681,  683,  683,    0,
      683,  683,  683,  683,  684,  684,  684,  684,  684,    0,
      596,  597,  597,  597,    0,    0,  597,    0,  597,  597,
      597,  597,  597,  597,  598,  598,  598,    0,    0,  598,
        0,  598,  598,  598,  598,  598,  598,  599,  599,  599,

        0,    0,  599,    0,  599,  599,  599,  599,  599,  599,
      600,  600,  600,    0,    0,  600,    0,  600,  600,  600,
      600,  600,  600,  601,  601,  601,    0,    0,  601,    0,
      601,  601,  601,  601,  601,  601,  603,  603,  603,    0,
        0,  603,    0,    0,    0,  603,  603,  603,  603,    0,
        0,    0,  603,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  691,  691,  691,  691,  698,  698,  698,  698,
      603,  604,  604,  604,  604,  604,  604,    0,    0,    0,
      604,  695,  695,  695,  695,  695,  696,  696,  696,    0,
        0,  696,  697,  697,  697,  697,  697,    0,  604,  605,

      605,  605,    0,    0,  605,    0,  605,  605,  605,  605,
      605,  605,  606,  606,  606,    0,    0,  606,    0,  606,
      606,  606,  606,  606,  606,  607,  607,  607,    0,    0,
      607,    0,    0,    0,  607,  607,  607,  607,    0,    0,
        0,  607,  704,  704,  704,  704,  708,  708,  708,  708,
      708,  709,  709,  709,    0,    0,  709,    0,    0,  607,
      608,  608,  608,    0,    0,  608,    0,  608,  608,  608,
      608,  608,  608,  609,  609,  609,    0,    0,  609,    0,
      609,  609,  609,  609,  609,  609,    0,    0,    0,  609,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  718,

      718,  718,  718,  737,  737,  737,  737,  609,  610,  610,
      610,    0,    0,  610,    0,  610,  610,  610,  610,  610,
      610,  611,  611,  611,    0,    0,  611,    0,  611,  611,
      611,  611,  611,  611,  614,  614,  614,    0,    0,  614,
        0,  614,  614,  614,  614,  614,  614,  615,  615,  615,
        0,    0,  615,    0,  615,  615,  615,  615,  615,  615,
      618,  618,  618,    0,    0,  618,    0,    0,    0,  618,
      618,  618,  618,  620,  620,  620,    0,    0,  620,    0,
      620,  620,  620,  620,  620,  620,    0,  720,  720,  620,
      720,  720,  720,  720,  723,  723,  723,  723,  723,  724,

      724,  724,    0,    0,  724,    0,    0,  620,  621,  621,
      621,    0,    0,  621,    0,  621,  621,  621,  621,  621,
      621,  622,  622,  622,    0,    0,  622,    0,  622,  622,
      622,  622,  622,  622,  624,  624,  624,    0,    0,  624,
        0,    0,    0,  624,  624,  624,  624,    0,  725,  725,
      624,  725,  725,  725,  725,  728,  728,    0,  728,  728,
      728,  728,  736,  736,  736,  736,  736,    0,  624,  625,
      625,  625,    0,    0,  625,    0,    0,    0,  625,  625,
      625,  625,    0,  730,  730,  625,  730,  730,  730,  730,
      733,  733,    0,  733,  733,  733,  733,  738,  738,  738,

      738,  738,    0,  625,  626,  626,  626,    0,    0,  626,
        0,  626,  626,  626,  626,  626,  626,    0,  735,  735,
      626,  735,  735,  735,  735,  743,  743,  743,  743,  747,
      747,  747,  747,  747,  750,  750,  750,  750,  626,  628,
      628,  628,    0,    0,  628,    0,    0,    0,  628,  628,
      628,  628,  630,  630,  630,    0,    0,  630,    0,  630,
      630,  630,  630,  630,  630,  748,  748,  748,  630,    0,
      748,  749,  749,  749,  749,  749,  756,  756,  756,  756,
      760,  760,  760,  760,  760,    0,  630,  631,  631,  631,
        0,    0,  631,    0,  631,  631,  631,  631,  631,  631,

      632,  632,  632,    0,    0,  632,    0,  632,  632,  632,
      632,  632,  632,  634,  634,  634,    0,    0,  634,    0,
        0,    0,  634,  634,  634,  634,  761,  761,  761,  634,
        0,  761,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  770,  770,  770,  770,    0,    0,  634,  635,  635,
      635,    0,    0,  635,    0,    0,    0,  635,  635,  635,
      635,    0,  772,  772,  635,  772,  772,  772,  772,  775,
      775,  775,  775,  775,  776,  776,  776,    0,    0,  776,
        0,    0,  635,  636,  636,  636,    0,    0,  636,    0,
      636,  636,  636,  636,  636,  636,    0,  777,  777,  636,

      777,  777,  777,  777,  780,  780,    0,  780,  780,  780,
      780,  786,  786,  786,  786,    0,    0,  636,  638,  638,
      638,    0,    0,  638,    0,    0,    0,  638,  638,  638,
      638,  639,  639,  639,    0,    0,  639,    0,    0,    0,
      639,  639,  639,  639,  782,  782,  782,  639,    0,  782,
        0,    0,  782,  787,  787,  787,  787,  793,  793,  793,
        0,    0,  793,    0,    0,  639,  640,  640,  640,    0,
        0,  640,    0,  640,  640,  640,  640,  640,  640,  641,
      641,  641,    0,    0,  641,    0,  641,  641,  641,  641,
      641,  641,  642,  642,  642,    0,    0,  642,    0,  642,

      642,  642,  642,  642,  642,    0,    0,    0,  642,  794,
      794,  794,  794,  799,  799,  799,  799,    0,  801,  801,
      801,  801,    0,    0,    0,  801,  642,  643,  643,  643,
        0,    0,  643,    0,  643,  643,  643,  643,  643,  643,
      644,  644,  644,  801,    0,  644,    0,  644,  644,  644,
      644,  644,  644,  645,  645,  645,    0,    0,  645,    0,
      645,  645,  645,  645,  645,  645,  646,  646,  646,    0,
        0,  646,    0,  646,  646,  646,  646,  646,  646,  647,
      647,  647,    0,    0,  647,    0,  647,  647,  647,  647,
      647,  647,  649,  649,  649,    0,    0,  649,    0,    0,

        0,  649,  649,  649,  649,  805,  805,  805,  649,    0,
      805,  811,  811,  811,    0,    0,  811,  815,  815,  815,
      815,  821,  821,  821,  821,    0,  649,  650,  650,  650,
      650,  650,  650,  819,  819,  819,  650,    0,  819,  822,
      822,  822,  822,  828,  828,  828,    0,    0,  828,  829,
      829,  829,  829,    0,  650,  651,  651,  651,    0,    0,
      651,    0,  651,  651,  651,  651,  651,  651,  652,  652,
      652,    0,    0,  652,    0,  652,  652,  652,  652,  652,
      652,  653,  653,  653,    0,    0,  653,    0,    0,    0,
      653,  653,  653,  653,    0,    0,    0,  653,  834,  834,

      834,  834,  835,  835,  835,  835,  841,  841,  841,    0,
        0,  841,    0,    0,    0,  653,  654,  654,  654,    0,
        0,  654,    0,  654,  654,  654,  654,  654,  654,  655,
      655,  655,    0,    0,  655,    0,  655,  655,  655,  655,
      655,  655,    0,    0,    0,  655,  842,  842,  842,  842,
      847,  847,  847,  847,    0,  849,  849,  849,  849,    0,
        0,    0,  849,  655,  656,  656,  656,    0,    0,  656,
        0,  656,  656,  656,  656,  656,  656,  657,  657,  657,
      849,    0,  657,    0,  657,  657,  657,  657,  657,  657,
      660,  660,  660,    0,    0,  660,    0,  660,  660,  660,

      660,  660,  660,  661,  661,  661,    0,    0,  661,    0,
      661,  661,  661,  661,  661,  661,  664,  664,  664,    0,
        0,  664,    0,    0,    0,  664,  664,  664,  664,  666,
      666,  666,    0,    0,  666,    0,  666,  666,  666,  666,
      666,  666,  853,  853,  853,  666,    0,  853,  859,  859,
      859,    0,    0,  859,  863,  863,  863,  863,  869,  869,
      869,  869,    0,  666,  667,  667,  667,    0,    0,  667,
        0,  667,  667,  667,  667,  667,  667,  668,  668,  668,
        0,    0,  668,    0,  668,  668,  668,  668,  668,  668,
      670,  670,  670,    0,    0,  670,    0,    0,    0,  670,

      670,  670,  670,  867,  867,  867,  670,    0,  867,  870,
      870,  870,  870,  876,  876,  876,    0,    0,  876,  877,
      877,  877,  877,    0,  670,  671,  671,  671,    0,    0,
      671,    0,    0,    0,  671,  671,  671,  671,  882,  882,
      882,  671,    0,  882,    0,  885,  885,  882,  885,  885,
      885,  885,  888,  888,    0,  888,  888,  888,  888,  671,
      672,  672,  672,    0,    0,  672,    0,  672,  672,  672,
      672,  672,  672,    0,  891,  891,  672,  891,  891,  891,
      891,  894,  894,    0,  894,  894,  894,  894,  903,  903,
      903,    0,    0,  903,  672,  679,  679,  679,    0,    0,

      679,  679,  679,  679,  679,  679,  679,  679,  680,  680,
      680,    0,    0,  680,  680,  680,  680,  680,  680,  680,
      680,  682,  682,  682,    0,    0,  682,  682,  682,  682,
      682,  682,  682,  682,  687,  687,  687,    0,    0,  687,
        0,  687,  687,  687,  687,  687,  687,  688,  688,  688,
        0,    0,  688,    0,  688,  688,  688,  688,  688,  688,
      693,  693,  693,    0,    0,  693,  693,  693,  693,  693,
      693,  693,  693,  694,  694,  694,    0,    0,  694,    0,
      694,  694,  694,  694,  694,  694,  699,  699,  699,    0,
        0,  699,    0,    0,  699,  699,  699,  699,  699,  700,

      700,  700,    0,    0,  700,    0,  700,  700,  700,  700,
      700,  700,  701,  701,  701,    0,    0,  701,    0,  701,
      701,  701,  701,  701,  701,  706,  706,  706,    0,    0,
      706,  706,  706,  706,  706,  706,  706,  706,  707,  707,
      707,    0,    0,  707,    0,  707,  707,  707,  707,  707,
      707,  710,  710,  710,    0,    0,  710,    0,  710,  710,
      710,  710,  710,  710,  713,  713,  713,    0,    0,  713,
        0,    0,  713,  713,  713,  713,  713,  714,  714,  714,
        0,    0,  714,    0,  714,  714,  714,  714,  714,  714,
      721,  721,  721,    0,    0,  721,  721,  721,  721,  721,

      721,  721,  721,  722,  722,  722,    0,    0,  722,    0,
      722,  722,  722,  722,  722,  722,  726,  726,  726,    0,
        0,  726,  726,  726,  726,  726,  726,  726,  726,  727,
      727,  727,    0,    0,  727,  727,  727,  727,  727,  727,
      727,  727,  729,  729,  729,    0,    0,  729,  729,  729,
      729,  729,  729,  729,  729,  731,  731,  731,    0,    0,
      731,  731,  731,  731,  731,  731,  731,  731,  732,  732,
      732,    0,    0,  732,  732,  732,  732,  732,  732,  732,
      732,  734,  734,  734,    0,    0,  734,  734,  734,  734,
      734,  734,  734,  734,  739,  739,  739,    0,    0,  739,

        0,  739,  739,  739,  739,  739,  739,  740,  740,  740,
        0,    0,  740,    0,  740,  740,  740,  740,  740,  740,
      745,  745,  745,    0,    0,  745,  745,  745,  745,  745,
      745,  745,  745,  746,  746,  746,    0,    0,  746,    0,
      746,  746,  746,  746,  746,  746,  751,  751,  751,    0,
        0,  751,    0,    0,  751,  751,  751,  751,  751,  752,
      752,  752,    0,    0,  752,    0,  752,  752,  752,  752,
      752,  752,  753,  753,  753,    0,    0,  753,    0,  753,
      753,  753,  753,  753,  753,  758,  758,  758,    0,    0,
      758,  758,  758,  758,  758,  758,  758,  758,  759,  759,

      759,    0,    0,  759,    0,  759,  759,  759,  759,  759,
      759,  762,  762,  762,    0,    0,  762,    0,  762,  762,
      762,  762,  762,  762,  765,  765,  765,    0,    0,  765,
        0,    0,  765,  765,  765,  765,  765,  766,  766,  766,
        0,    0,  766,    0,  766,  766,  766,  766,  766,  766,
      773,  773,  773,    0,    0,  773,  773,  773,  773,  773,
      773,  773,  773,  774,  774,  774,    0,    0,  774,    0,
      774,  774,  774,  774,  774,  774,  778,  778,  778,    0,
        0,  778,  778,  778,  778,  778,  778,  778,  778,  779,
      779,  779,    0,    0,  779,  779,  779,  779,  779,  779,

      779,  779,  781,  781,  781,    0,    0,  781,  781,  781,
      781,  781,  781,  781,  781,  788,  788,  788,    0,    0,
      788,    0,  788,  788,  788,  788,  788,  788,  791,  791,
      791,    0,    0,  791,    0,  791,  791,  791,  791,  791,
      791,  795,  795,  795,    0,    0,  795,    0,    0,    0,
      795,  795,  795,  795,  796,  796,  796,    0,    0,  796,
        0,  796,  796,  796,  796,  796,  796,  797,  797,  797,
        0,    0,  797,    0,  797,  797,  797,  797,  797,  797,
      800,  800,  800,    0,    0,  800,    0,    0,    0,  800,
      800,  800,  800,  802,  802,  802,    0,    0,  802,    0,

      802,  802,  802,  802,  802,  802,    0,  896,  896,  802,
      896,  896,  896,  896,  897,  897,    0,  897,  897,  897,
      897,  906,  906,  906,  906,    0,    0,  802,  803,  803,
      803,    0,    0,  803,    0,  803,  803,  803,  803,  803,
      803,  804,  804,  804,    0,    0,  804,    0,  804,  804,
      804,  804,  804,  804,  806,  806,  806,    0,    0,  806,
        0,    0,    0,  806,  806,  806,  806,    0,  899,  899,
      806,  899,  899,  899,  899,  900,  900,    0,  900,  900,
      900,  900,  907,  907,  907,  907,    0,    0,  806,  807,
      807,  807,    0,    0,  807,    0,    0,    0,  807,  807,

      807,  807,    0,  902,  902,  807,  902,  902,  902,  902,
      913,  913,  913,    0,    0,  913,  914,  914,  914,  914,
        0,    0,    0,  807,  808,  808,  808,    0,    0,  808,
        0,  808,  808,  808,  808,  808,  808,  921,  921,  921,
      808,    0,  921,  922,  922,  922,  922,  929,  929,  929,
        0,    0,  929,  930,  930,  930,  930,    0,  808,  809,
      809,  809,    0,    0,  809,    0,  809,  809,  809,  809,
      809,  809,  810,  810,  810,    0,    0,  810,    0,  810,
      810,  810,  810,  810,  810,  812,  812,  812,    0,    0,
      812,    0,    0,    0,  812,  812,  812,  812,    0,    0,

        0,  812,  931,  931,  931,  931,  935,  935,  935,  935,
      936,  936,  936,  936,  938,  938,  938,  938,    0,  812,
      813,  813,  813,    0,    0,  813,    0,    0,    0,  813,
      813,  813,  813,    0,    0,    0,  813,  939,  939,  939,
      939,    0,    0,  937,  937,  937,  937,  960,  960,  960,
      937,    0,  960,    0,  813,  814,  814,  814,    0,  960,
      814,    0,  814,  814,  814,  814,  814,  814,  937,    0,
        0,  814,  943,  943,  943,  943,  944,  944,  944,  944,
        0,  945,  945,  945,  945,    0,    0,    0,  945,  814,
      816,  816,  816,    0,    0,  816,    0,    0,    0,  816,

      816,  816,  816,  817,  817,  817,  945,    0,  817,    0,
      817,  817,  817,  817,  817,  817,  818,  818,  818,    0,
        0,  818,    0,  818,  818,  818,  818,  818,  818,  820,
      820,  820,    0,    0,  820,    0,    0,    0,  820,  820,
      820,  820,    0,    0,    0,  820,  946,  946,  946,  946,
      947,  947,  947,  947,  951,  951,  951,  951,  952,  952,
      952,  952,    0,  820,  823,  823,  823,    0,    0,  823,
        0,  823,  823,  823,  823,  823,  823,  824,  824,  824,
        0,    0,  824,    0,  824,  824,  824,  824,  824,  824,
      826,  826,  826,    0,    0,  826,    0,  826,  826,  826,

      826,  826,  826,  827,  827,  827,    0,    0,  827,    0,
      827,  827,  827,  827,  827,  827,  830,  830,  830,    0,
        0,  830,    0,    0,    0,  830,  830,  830,  830,  831,
      831,  831,    0,    0,  831,    0,  831,  831,  831,  831,
      831,  831,  832,  832,  832,    0,    0,  832,    0,  832,
      832,  832,  832,  832,  832,  836,  836,  836,    0,    0,
      836,    0,  836,  836,  836,  836,  836,  836,  837,  837,
      837,    0,    0,  837,    0,  837,  837,  837,  837,  837,
      837,  839,  839,  839,    0,    0,  839,    0,  839,  839,
      839,  839,  839,  839,  840,  840,  840,    0,    0,  840,

        0,  840,  840,  840,  840,  840,  840,  843,  843,  843,
        0,    0,  843,    0,    0,    0,  843,  843,  843,  843,
      844,  844,  844,    0,    0,  844,    0,  844,  844,  844,
      844,  844,  844,  845,  845,  845,    0,    0,  845,    0,
      845,  845,  845,  845,  845,  845,  848,  848,  848,    0,
        0,  848,    0,    0,    0,  848,  848,  848,  848,  850,
      850,  850,    0,    0,  850,    0,  850,  850,  850,  850,
      850,  850,    0,    0,    0,  850,  959,  959,  959,    0,
        0,  959,    0,    0,    0,  953,  953,  953,  953,    0,
        0,    0,  953,  850,  851,  851,  851,    0,    0,  851,

        0,  851,  851,  851,  851,  851,  851,  852,  852,  852,
      953,  959,  852,    0,  852,  852,  852,  852,  852,  852,
      854,  854,  854,    0,    0,  854,    0,    0,    0,  854,
      854,  854,  854,  954,  954,  954,  854,    0,  954,  957,
      957,  957,    0,    0,  957,  961,  961,  961,    0,    0,
      961,    0,    0,    0,  854,  855,  855,  855,    0,    0,
      855,    0,    0,    0,  855,  855,  855,  855,  962,  962,
      962,  855,    0,  962,    0,    0,  954,  963,  963,  963,
        0,  957,  963,  964,    0,  964,    0,    0,  964,  855,
      856,  856,  856,    0,    0,  856,    0,  856,  856,  856,

      856,  856,  856,  965,  965,  965,  856,  966,  965,  966,
        0,  967,  966,  967,    0,  968,  967,  968,    0,    0,
      968,    0,    0,    0,  856,  857,  857,  857,    0,    0,
      857,    0,  857,  857,  857,  857,  857,  857,  858,  858,
      858,    0,    0,  858,    0,  858,  858,  858,  858,  858,
      858,  860,  860,  860,    0,    0,  860,    0,    0,    0,
      860,  860,  860,  860,  969,    0,  969,  860,  970,  969,
      970,    0,    0,  970,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  860,  861,  861,  861,    0,
        0,  861,    0,    0,    0,  861,  861,  861,  861,    0,

        0,    0,  861,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      861,  862,  862,  862,    0,    0,  862,    0,  862,  862,
      862,  862,  862,  862,    0,    0,    0,  862,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  862,  864,  864,  864,    0,
        0,  864,    0,    0,    0,  864,  864,  864,  864,  865,
      865,  865,    0,    0,  865,    0,  865,  865,  865,  865,
      865,  865,  866,  866,  866,    0,    0,  866,    0,  866,
      866,  866,  866,  866,  866,  868,  868,  868,    0,    0,

      868,    0,    0,    0,  868,  868,  868,  868,    0,    0,
        0,  868,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  868,
      871,  871,  871,    0,    0,  871,    0,  871,  871,  871,
      871,  871,  871,  872,  872,  872,    0,    0,  872,    0,
      872,  872,  872,  872,  872,  872,  874,  874,  874,    0,
        0,  874,    0,  874,  874,  874,  874,  874,  874,  875,
      875,  875,    0,    0,  875,    0,  875,  875,  875,  875,
      875,  875,  878,  878,  878,    0,    0,  878,    0,    0,
        0,  878,  878,  878,  878,  879,  879,  879,    0,    0,

      879,    0,  879,  879,  879,  879,  879,  879,  880,  880,
      880,    0,    0,  880,    0,  880,  880,  880,  880,  880,
      880,  886,  886,  886,    0,    0,  886,  886,  886,  886,
      886,  886,  886,  886,  887,  887,  887,    0,    0,  887,
      887,  887,  887,  887,  887,  887,  887,  889,  889,  889,
        0,    0,  889,  889,  889,  889,  889,  889,  889,  889,
      890,  890,  890,    0,    0,  890,  890,  890,  890,  890,
      890,  890,  890,  892,  892,  892,    0,    0,  892,  892,
      892,  892,  892,  892,  892,  892,  893,  893,  893,    0,
        0,  893,  893,  893,  893,  893,  893,  893,  893,  895,

      895,  895,    0,    0,  895,  895,  895,  895,  895,  895,
      895,  895,  898,  898,  898,    0,    0,  898,  898,  898,
      898,  898,  898,  898,  898,  901,  901,  901,    0,    0,
      901,  901,  901,  901,  901,  901,  901,  901,  908,  908,
      908,    0,    0,  908,    0,  908,  908,  908,  908,  908,
      908,  911,  911,  911,    0,    0,  911,    0,  911,  911,
      911,  911,  911,  911,  915,  915,  915,    0,    0,  915,
        0,    0,    0,  915,  915,  915,  915,  916,  916,  916,
        0,    0,  916,    0,  916,  916,  916,  916,  916,  916,
      919,  919,  919,    0,    0,  919,    0,  919,  919,  919,

      919,  919,  919,  923,  923,  923,    0,    0,  923,    0,
        0,    0,  923,  923,  923,  923,  924,  924,  924,    0,
        0,  924,    0,  924,  924,  924,  924,  924,  924,  927,
      927,  927,    0,    0,  927,    0,  927,  927,  927,  927,
      927,  927,  972,  972,  972,  972,  972,  972,  972,  972,
      973,  973,  973,  973,  973,  973,  973,  973,  974,  974,
      974,  974,  974,  974,  974,  974,  975,  975,  975,  975,
      975,  975,  975,  975,  976,  976,  976,  976,  976,  976,
      976,  976,  977,    0,    0,  977,  978,    0,    0,  978,
        0,  978,  978,  978,  979,  979,  979,  979,  979,  979,

      979,  979,  980,    0,    0,  980,    0,  980,  980,  981,
      981,  981,  981,  981,  981,  981,  981,  982,  982,    0,
      982,    0,  982,  982,  982,  983,  983,  983,  983,  983,
      983,  983,  983,  984,  984,    0,  984,  984,  984,  984,
      984,  985,  985,  985,  985,  985,  985,  985,  985,  986,
      986,  986,  986,  986,  986,  986,  986,  987,  987,    0,
        0,  987,  987,  989,  989,  989,  989,  989,  989,  989,
      989,  990,  990,  990,  990,  990,  990,  990,  990,  991,
      991,  991,  991,  991,  991,  991,  991,  992,  992,  992,
      992,  992,  992,  992,  992,  994,  994,  994,  994,  994,

      994,  994,  994,  995,  995,  995,  995,  995,  995,  995,
      995,  996,  996,  996,  996,  996,  996,  996,  996,  997,
      997,    0,  997,    0,  997,  997,  997,  998,  998,  998,
      998,  998,  998,  998,  998, 1000, 1000,    0, 1000, 1000,
     1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1002,    0,    0, 1002, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1005, 1005,    0,    0, 1005, 1005, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1026,    0,    0, 1026, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037,

     1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1049,    0,    0, 1049, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1077,    0,    0, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
     1095, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1113, 1113, 1113,

     1113, 1113, 1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1124,    0,    0, 1124, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1132, 1132,    0, 1132, 1132,
     1132, 1132, 1132,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,

      971
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const short int yy_rule_linenum[46] =
    {   0,
      112,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  131,  135,  139,  147,  150,  158,  159,
      161,  162,  171,  172,  178,  179,  184,  185,  190,  191,
      196,  197,  202,  205,  207,  211,  215,  220,  222,  223,
      230,  236,  243,  246,  250
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
/**************************************************
 * VRML 2.0 Parser
 * Copyright (C) 1996 Silicon Graphics, Inc.
 *
 * Author(s)	: Gavin Bell
 *                Daniel Woods (first port)
 **************************************************
 */
#include "tokens.h"
#include <string.h>

extern BOOL fileInMemory;
extern int freadMem(void *buf,size_t size, size_t count);

	/* Current line number */
int currentLineNumber = 1;
void yyResetLineNumber() { currentLineNumber = 1; }

extern void yyerror(const char *);

	/* The YACC parser sets this to a token to direct the lexer */
    /* in cases where just syntax isn't enough: */
int expectToken = 0;

	/* True when parsing a multiple-valued field: */
static int parsing_mf = 0;

	/* These are used when parsing SFImage fields: */
static int sfImageIntsParsed = 0;
static int sfImageIntsExpected = 0;

int yywrap() { BEGIN INITIAL; return 1; }

/* Normal state:  parsing nodes.  The initial start state is used */
/* only to recognize the VRML header. */
/* Start tokens for all of the field types, */
/* except for MFNode and SFNode, which are almost completely handled */
/* by the parser: */
/* Big hairy expression for floating point numbers: */
/* Ints are decimal or hex (0x##): */
/* Whitespace.  Using this pattern can screw up currentLineNumber, */
/* so it is only used wherever it is really convenient and it is */
/* extremely unlikely that the user will put in a carriage return */
/* (example: between the floats in an SFVec3f) */
/* And the same pattern without the newline */
/* Legal characters to start an identifier */
/* Legal other characters in an identifier */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = getc( yyin ); \
		result = c == EOF ? 0 : 1; \
		buf[0] = (char) c; \
		} \
	else if (fileInMemory ) \
		{\
		result = freadMem(buf,1, max_size);\
		}\
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

// .......... stuff for communicating field values from the lexer to the parser
extern FieldRec *currentlyParsing;
extern NameTypeRec *currentProtoFieldRec;
extern BOOL loadingProtos;
char stringtext[512];
extern route callbackRoute;
extern routeCallback *router;
int routeState = 0;
char *routeField;
int routeNodeLen = 0;

// .......... parse the string value and set or add to the current field accordingly
void initField(int type, char *str)
{
 	
// .......... NOTE: Currently the parser has a bug when scanning these string types, so we don't load them
//if (type == SFSTRING || type == MFSTRING)
//	return;

if (loadingProtos)
	{
// .......... here we record the default values in the proto nodes
	assert (currentProtoFieldRec); // there must be a proto field being parsed
	assert (currentProtoFieldRec->type == type); // types must be the same
	assert (type != MFNODE && type != SFNODE); // don't support non-NULL default values for nodes

	void *fv = vrmlNode::getFieldPtr(currentProtoFieldRec->def, type);
	vrmlNode::initField( fv, type, str );
	return;
	}

	const char *fname = currentlyParsing->fieldName;
	vrmlNode *n = currentlyParsing->node;
	assert(fname);
	assert(n);
	n->setField( fname, type, str );
}


// .......... end of field value stuff added to lexer.cpp

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	/* Switch into a new start state if the parser */
    /* just told us that we've read a field name */
    /* and should expect a field value (or IS) */
	if (expectToken != 0) {
      if (yy_flex_debug)
          fprintf(stderr,"LEX--> Start State %d\n", expectToken);
      
      /*
       * Annoying.  This big switch is necessary because
       * LEX wants to assign particular numbers to start
       * tokens, and YACC wants to define all the tokens
       * used, too.  Sigh.
       */
      switch(expectToken) {
       	case SFBOOL: BEGIN SFB; break;
        case SFCOLOR: BEGIN SFC; break;
        case SFFLOAT: BEGIN SFF; break;
        case SFIMAGE: BEGIN SFIMG; break;
        case SFINT32: BEGIN SFI; break;
        case SFROTATION: BEGIN SFR; break;
        case SFSTRING: BEGIN SFS; break;
        case SFTIME: BEGIN SFT; break;
        case SFVEC2F: BEGIN SFV2; break;
        case SFVEC3F: BEGIN SFV3; break;
        case MFCOLOR: BEGIN MFC; break;
        case MFFLOAT: BEGIN MFF; break;
        case MFINT32: BEGIN MFI; break;
        case MFROTATION: BEGIN MFR; break;
        case MFSTRING: BEGIN MFS; break;
        case MFVEC2F: BEGIN MFV2; break;
        case MFVEC3F: BEGIN MFV3; break;

        /* SFNode and MFNode are special.  Here the lexer just returns */
        /* "marker tokens" so the parser knows what type of field is */
        /* being parsed; unlike the other fields, parsing of SFNode/MFNode */
        /* field happens in the parser. */
        case MFNODE: expectToken = 0; return MFNODE;
        case SFNODE: expectToken = 0; return SFNODE;
        
        default: yyerror("ACK: Bad expectToken"); break;
      }
    }


	/* This is more complicated than they really need to be because */
    /* I was ambitious and made the whitespace-matching rule aggressive */

	if ( yy_init )
		{
#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( yy_current_buffer )
			yy_init_buffer( yy_current_buffer, yyin );
		else
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();

		yy_init = 0;
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 972 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8254 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 46 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 46 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 47 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_USER_ACTION
{ BEGIN NODE; }
	YY_BREAK
	/* The lexer is in the NODE state when parsing nodes, either */
    /* top-level nodes in the .wrl file, in a prototype implementation, */
    /* or when parsing the contents of SFNode or MFNode fields. */
case 2:
YY_USER_ACTION
{ return PROTO; }
	YY_BREAK
case 3:
YY_USER_ACTION
{ return EXTERNPROTO; }
	YY_BREAK
case 4:
YY_USER_ACTION
{ return DEF; }
	YY_BREAK
case 5:
YY_USER_ACTION
{ return USE; }
	YY_BREAK
case 6:
YY_USER_ACTION
{ routeState = 3; return TO; }
	YY_BREAK
case 7:
YY_USER_ACTION
{ return IS; }
	YY_BREAK
case 8:
YY_USER_ACTION
{ routeState = 1; return ROUTE; }
	YY_BREAK
case 9:
YY_USER_ACTION
{ return SFN_NULL; }
	YY_BREAK
case 10:
YY_USER_ACTION
{
return EVENTIN; }
YY_BREAK
case 11:
YY_USER_ACTION
{
return EVENTOUT; }
	YY_BREAK
case 12:
YY_USER_ACTION
{ return FIELD; }
	YY_BREAK
case 13:
YY_USER_ACTION
{ return EXPOSEDFIELD; }
	YY_BREAK
	/* Legal identifiers: */
case 14:
YY_USER_ACTION
{ yylval.string = strdup(yytext);

// .......... handle the route statment callback
if (routeState == 1)
	{
	// .......... split the node and field names and copy them
	assert(strlen(yytext) <= MAX_FIELD_LEN);
	strcpy( callbackRoute.nodeFrom, yytext);
	routeState = 2;
	}
else if(routeState == 2)
	{
	assert(strlen(yytext) <= MAX_FIELD_LEN);
	strcpy( callbackRoute.fieldFrom, yytext);
	routeState = 0; // expecting a 'TO' next
	}
else if(routeState == 3)
	{
	assert(strlen(yytext) <= MAX_FIELD_LEN);
	strcpy( callbackRoute.nodeTo, yytext);
	routeState = 4;
	}
else if(routeState == 4)
	{
	assert(strlen(yytext) <= MAX_FIELD_LEN);
	strcpy( callbackRoute.fieldTo, yytext);
	routeState = 0;
	// .......... assume we've just finished a ROUTE command, so use
	// .......... the callback to inform the user of the ROUTE
	if (router)
		(*router)(&callbackRoute);
	}
return IDENTIFIER; }
	YY_BREAK
	/* All fields may have an IS declaration: */
case 15:
YY_USER_ACTION
{ BEGIN NODE;
													  expectToken = 0;
                                                      yyless(0);
                                                    }
	YY_BREAK
case 16:
YY_USER_ACTION
{ BEGIN NODE;
									    expectToken = 0;
                                        yyless(0); /* put back the IS */
                                      }
	YY_BREAK
    /* All MF field types other than MFNode are completely parsed here */
    /* in the lexer, and one token is returned to the parser.  They all */
    /* share the same rules for open and closing brackets: */
case 17:
YY_USER_ACTION
{ if (parsing_mf) yyerror("Double [");
									  parsing_mf = 1;
                                    }
	YY_BREAK
case 18:
YY_USER_ACTION
{ if (!parsing_mf) yyerror("Unmatched ]");
									  int fieldType = expectToken;
									  BEGIN NODE;
                                      parsing_mf = 0;
                                      expectToken = 0;
                                      return fieldType;
                                    }
	YY_BREAK
case 19:
YY_USER_ACTION
 
{ BEGIN NODE; initField(expectToken, "1"); expectToken = 0; return SFBOOL; }
	YY_BREAK
case 20:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, "0"); expectToken = 0; return SFBOOL; }
	YY_BREAK
case 21:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFINT32; }
	YY_BREAK
case 22:
YY_USER_ACTION
{ if (parsing_mf) initField(expectToken, yytext); 
				  else {
                  	  BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFINT32;
                  }
                }
	YY_BREAK
	/* All the floating-point types are pretty similar: */
case 23:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFFLOAT; }
	YY_BREAK
case 24:
YY_USER_ACTION
{ if (parsing_mf) initField(expectToken, yytext); /* Add to array... */
                  	  else {
                      	/* No open bracket means a single value: */
                        BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFFLOAT;
                      }
                    }
	YY_BREAK
case 25:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext);expectToken = 0; return SFVEC2F; }
	YY_BREAK
case 26:
YY_USER_ACTION
{ if (parsing_mf) initField(expectToken, yytext); /* .. add to array... */
              		  		  else {
                              	BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFVEC2F;
                              }
                            }
	YY_BREAK
case 27:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFVEC3F; }
	YY_BREAK
case 28:
YY_USER_ACTION
{ if (parsing_mf)
	{  initField(expectToken, yytext); /* .. add to array... */}
              					  else {
                                    BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFVEC3F;
                                  }
                                }
	YY_BREAK
case 29:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFROTATION; }
	YY_BREAK
case 30:
YY_USER_ACTION
{ if (parsing_mf) initField(expectToken, yytext); /* .. add to array... */
			              		  else {
                                    BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFROTATION;
                                  }
                                }
	YY_BREAK
case 31:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFCOLOR; }
	YY_BREAK
case 32:
YY_USER_ACTION
{ if (parsing_mf) initField(expectToken, yytext); /* .. add to array... */
			              		  else {
                                    BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return MFCOLOR;
                                  }
                                }
	YY_BREAK
case 33:
YY_USER_ACTION
{ BEGIN NODE; initField(expectToken, yytext); expectToken = 0; return SFTIME; }
	YY_BREAK
    /* SFString/MFString */
case 34:
YY_USER_ACTION
{ if (parsing_mf)
		BEGIN IN_MFS;		
	else
		BEGIN IN_SFS; }
	stringtext[0]='\0'; // reset the string before each read
	YY_BREAK
	/* Anything besides open-quote (or whitespace) is an error: */
case 35:
YY_USER_ACTION
{ yyerror("String missing open-quote");
						  BEGIN NODE; expectToken = 0; return SFSTRING;
                        }
	YY_BREAK
    /* Expect open-quote, open-bracket, or whitespace: */
case 36:
YY_USER_ACTION
{ yyerror("String missing open-quote");
						  	  BEGIN NODE; expectToken = 0; return MFSTRING;
                            }
	YY_BREAK
    /* Backslashed-quotes are OK: */
case 37:
YY_USER_ACTION
;
	YY_BREAK
    /* Gobble up anything besides quotes and newlines. */
    /* Newlines are legal in strings, but we exclude them here so */
    /* that line number are counted correctly by the catch-all newline */
    /* rule that applies to everything. */
case 38:
YY_USER_ACTION
;

{ if (parsing_mf) {
		strcpy(stringtext,yytext); /* ... add to array ... */

		    if (!stricmp(yytext,"]"))
			{
			// put this end of MFString detection here because the real detection doesn't seem to work -c
			int fieldType = expectToken;
			BEGIN NODE;
                       parsing_mf = 0;
                       expectToken = 0;
                       return fieldType;
			}
		   }
		else {
                     	  strcpy(stringtext,yytext);
                    }
}
	YY_BREAK
	/* Quote ends the string: */
case 39:
YY_USER_ACTION
{ if (!parsing_mf)
	{
	BEGIN NODE;
	if (stringtext[0])
		initField(expectToken, stringtext);
	stringtext[0]='\0'; // reset the text string so it doesnt show up twice when the lexer comes back here for the next open quote
	expectToken = 0; return SFSTRING;
	}

// parsing MFString...need to detect end of strings ? 
initField(expectToken, stringtext);
}
	YY_BREAK
case 40:
YY_USER_ACTION
{ if (parsing_mf)
	{
	if (stringtext[0])
		initField(expectToken, stringtext); /* ... add to array ... */
	stringtext[0]='\0'; // reset the text string so it doesnt show up twice when the lexer comes back here for the next open quote
	}
						  else {
                          	  BEGIN NODE; expectToken = 0; return MFSTRING;
                          }
                        }
	YY_BREAK
    /* SFImage: width height numComponents then width*height integers: */
case 41:
YY_USER_ACTION
{ int w, h;
						  sscanf(yytext, "%d %d", &w, &h);
                          sfImageIntsExpected = 1+w*h;
                          sfImageIntsParsed = 0;                          
                          BEGIN IN_SFIMG;
                        }
	YY_BREAK
case 42:
YY_USER_ACTION
{ ++sfImageIntsParsed;
						  if (sfImageIntsParsed == sfImageIntsExpected) {
                          	  BEGIN NODE; expectToken = 0; return SFIMAGE;
                          }
                        }
	YY_BREAK
	/* Whitespace and catch-all rules apply to all start states: */
case 43:
YY_USER_ACTION
;
	YY_BREAK
	/* This is also whitespace, but we'll keep track of line number */
    /* to report in errors: */
case 44:
YY_USER_ACTION
{ ++currentLineNumber; }
	YY_BREAK
	/* This catch-all rule catches anything not covered by any of */
    /* the above: */
case 45:
YY_USER_ACTION
{ return yytext[0]; }
	YY_BREAK
case 46:
YY_USER_ACTION
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NODE):
case YY_STATE_EOF(SFB):
case YY_STATE_EOF(SFC):
case YY_STATE_EOF(SFF):
case YY_STATE_EOF(SFIMG):
case YY_STATE_EOF(SFI):
case YY_STATE_EOF(SFR):
case YY_STATE_EOF(SFS):
case YY_STATE_EOF(SFT):
case YY_STATE_EOF(SFV2):
case YY_STATE_EOF(SFV3):
case YY_STATE_EOF(MFC):
case YY_STATE_EOF(MFF):
case YY_STATE_EOF(MFI):
case YY_STATE_EOF(MFR):
case YY_STATE_EOF(MFS):
case YY_STATE_EOF(MFV2):
case YY_STATE_EOF(MFV3):
case YY_STATE_EOF(IN_SFS):
case YY_STATE_EOF(IN_MFS):
case YY_STATE_EOF(IN_SFIMG):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = yy_cp - yytext_ptr - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
							yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr - 1; /* copy prev. char, too */
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = yy_c_buf_p - yytext_ptr;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset = yy_c_buf_p - b->yy_ch_buf;

			b->yy_buf_size *= 2;
			b->yy_ch_buf = (char *)
				yy_flex_realloc( (void *) b->yy_ch_buf,
						 b->yy_buf_size );

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move - YY_MORE_ADJ == 1 )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	/* yytext begins at the second character in yy_ch_buf; the first
	 * character is the one which preceded it before reading in the latest
	 * buffer; it needs to be kept around in case it's a newline, so
	 * yy_get_previous_state() will have with '^' rules active.
	 */

	yytext_ptr = &yy_current_buffer->yy_ch_buf[1];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 972 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 972 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 971);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += dest - source;
		yy_bp += dest - source;
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
		yy_cp[-2] = '\n';

	*--yy_cp = (char) c;


	/* Note: the formal parameter *must* be called "yy_bp" for this
	 * macro to now work correctly.
	 */
	YY_DO_BEFORE_ACTION; /* set up yytext again */
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


void deleteVrmlBuffer()
{
if ( yy_current_buffer )
	yy_delete_buffer( yy_current_buffer );
}



#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );

	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );

	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	yy_flex_free( (void *) b->yy_ch_buf );
	yy_flex_free( (void *) b );
	}


#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
	{
	b->yy_input_file = file;

	/* We put in the '\n' and start reading from [1] so that an
	 * initial match-at-newline will be TRUE.
	 */

	b->yy_ch_buf[0] = '\n';
	b->yy_n_chars = 1;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[1];

	b->yy_is_interactive = file ? isatty( fileno(file) ) : 0;

	b->yy_fill_buffer = 1;

	b->yy_buffer_status = YY_BUFFER_NEW;
	}


#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		int new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}


static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}


static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}


#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( 1 );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( unsigned int size )
#else
static void *yy_flex_alloc( size )
unsigned int size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, unsigned int size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
unsigned int size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
